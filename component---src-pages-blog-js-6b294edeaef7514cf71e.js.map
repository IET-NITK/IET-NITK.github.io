{"version":3,"sources":["webpack:///./src/components/partials/pagination.js","webpack:///./src/components/helper.js","webpack:///./src/pages/blog.js"],"names":["scrollTop","document","body","documentElement","PaginationComponent","max","list","item","noneMessage","useState","pno","state","setState","length","className","slice","map","aria-label","onClick","Array","Math","ceil","e","i","key","data-toggle","title","generateSIGHash","sig_images","img_hash","forEach","element","name","childImageSharp","fixed","srcWebp","RenderAuthors","arr","cls","index2","to","toLowerCase","split","join","Blog","data","location","pathname","allFile","nodes","index","image","childMarkdownRemark","frontmatter","ietlogo","alt","src","style","width","height","timeToRead","authors","date","excerpt","relativeDirectory","type"],"mappings":"gIAEA,SAASA,IACyB,IAA5BC,SAASC,KAAKF,UAChBC,SAASC,KAAKF,UAAY,EAE1BC,SAASE,gBAAgBH,UAAY,EA0E1BI,IAvEa,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EACtCC,mBAAS,CACjCC,IAAK,IADAC,EADyD,KAClDC,EADkD,KAIhE,OAAoB,IAAhBN,EAAKO,OACA,yBAAKC,UAAU,eAAeN,GAIrC,oCACiB,IAAdG,EAAMD,IACL,oCACE,wBAAII,UAAU,gBAAd,QAAmCH,EAAMD,KACzC,6BACA,8BAEA,KAEHJ,EAAKS,OAAOJ,EAAMD,IAAM,GAAKL,GAAMM,EAAMD,IAAM,GAAKL,EAAMA,GAAKW,IAAIT,GACpE,yBAAKU,aAAW,2BACd,wBAAIH,UAAU,qCACZ,wBAAIA,UAAS,cAA6B,IAAdH,EAAMD,IAAY,WAAa,KACzD,4BACEI,UAAU,YACVI,QAAS,WACPlB,IACAY,EAAS,CAAEF,IAAKC,EAAMD,IAAM,MAJhC,aAUD,YAAIS,MAAMC,KAAKC,KAAKf,EAAKO,OAASR,KAAOW,KAAI,SAACM,EAAGC,GAAJ,OAC5C,wBACET,UAAS,cAAeH,EAAMD,MAAQa,EAAI,EAAI,SAAW,IACzDC,IAAK,IAAID,GAET,4BACET,UAAU,YACVW,cAAY,UACZC,MAAK,SAAUH,EAAI,GACnBL,QAAS,WACPlB,IACAY,EAAS,CAAEF,IAAKa,EAAI,MAGrBA,EAAI,OAIX,wBACET,UAAS,cACPH,EAAMD,MAAQU,KAAKC,KAAKf,EAAKO,OAASR,GAAO,WAAa,KAG5D,4BACES,UAAU,YACVI,QAAS,WACPlB,IACAY,EAAS,CAAEF,IAAKC,EAAMD,IAAM,MAJhC,c,kCChEZ,yGAOaiB,EAAkB,SAAAC,GAC7B,IAAIC,EAAW,GAKf,OAJAD,GACEA,EAAWE,SAAQ,SAAAC,GACjBF,EAASE,EAAQC,MAAQD,EAAQE,gBAAgBC,MAAMC,WAEpDN,GAGIO,EAAgB,SAACC,EAAKC,GAAN,OAC3BD,EAAIrB,KAAI,SAACgB,EAAMO,GAAP,OACN,oCACE,kBAAC,IAAD,CACEf,IAAK,IAAMe,EACXC,GAAI,YAAcR,EAAKS,cAAcC,MAAM,KAAKC,KAAK,KAEpDX,GAEFO,EAAS,IAAMF,EAAIxB,OAChB,OACA0B,EAAS,IAAMF,EAAIxB,OACnB,IACA,S,kCC7BV,iIAOa+B,EAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,kBAAC,IAAD,CAAQA,SAAUA,EAASC,SAAUrB,MAAO,QAC1C,kBAAC,IAAD,CAAKA,MAAM,SACX,0BAAMZ,UAAU,uBACd,6BAASA,UAAU,oCACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,gBAAd,0BACA,gGAIF,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CACET,IAAK,EACLC,KAAMuC,EAAKG,QAAQC,MACnB1C,KAAM,SAACwB,EAASmB,GACd,IAAIC,EAAQpB,EAAQqB,oBAAoBC,YAAYF,MAGpD,OADAA,GADAA,EAAQA,GAASA,EAAMlB,gBAAgBC,MAAMC,UAC5BU,EAAKS,QAAQpB,MAAMC,QAElC,yBAAKX,IAAK0B,EAAOpC,UAAU,mBACzB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBACEyC,IAAKxB,EAAQqB,oBAAoBC,YAAY3B,MAC7CZ,UAAU,oBACV0C,IAAKL,EACLM,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAGpC,yBAAK7C,UAAU,YACb,wBACEW,cAAY,UACZC,MACEK,EAAQqB,oBAAoBQ,WAC5B,gBAGD7B,EAAQqB,oBAAoBC,YAAY3B,OAE3C,yBAAKZ,UAAU,QACb,0BAAMA,UAAU,cAAhB,KACK,IACFsB,YACCL,EAAQqB,oBAAoBC,YAAYQ,QACxC,IAEF,6BACC9B,EAAQqB,oBAAoBC,YAAYS,OAG7C,2BAAI/B,EAAQqB,oBAAoBW,SAChC,kBAAC,IAAD,CACEvB,GAAI,SAAWT,EAAQiC,kBACvBlD,UAAU,iCACVmD,KAAK,UAHP,yBAuDXrB","file":"component---src-pages-blog-js-6b294edeaef7514cf71e.js","sourcesContent":["import React, { useState } from \"react\"\n\nfunction scrollTop() {\n  if (document.body.scrollTop !== 0) {\n    document.body.scrollTop = 0\n  } else {\n    document.documentElement.scrollTop = 0\n  }\n}\nconst PaginationComponent = ({ max, list, item, noneMessage }) => {\n  const [state, setState] = useState({\n    pno: 1,\n  })\n  if (list.length === 0) {\n    return <div className=\"text-center\">{noneMessage}</div>\n  }\n\n  return (\n    <>\n      {state.pno !== 1 ? (\n        <>\n          <h6 className=\"text-primary\">Page {state.pno}</h6>\n          <hr />\n          <br />\n        </>\n      ) : null}\n\n      {list.slice((state.pno - 1) * max, (state.pno - 1) * max + max).map(item)}\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination justify-content-center\">\n          <li className={`page-item ${state.pno === 1 ? \"disabled\" : \"\"}`}>\n            <button\n              className=\"page-link\"\n              onClick={() => {\n                scrollTop()\n                setState({ pno: state.pno - 1 })\n              }}\n            >\n              Previous\n            </button>\n          </li>\n          {[...Array(Math.ceil(list.length / max))].map((e, i) => (\n            <li\n              className={`page-item ${state.pno === i + 1 ? \"active\" : \"\"}`}\n              key={'a'+i}\n            >\n              <button\n                className=\"page-link\"\n                data-toggle=\"tooltip\"\n                title={`Page ${i + 1}`}\n                onClick={() => {\n                  scrollTop()\n                  setState({ pno: i + 1 })\n                }}\n              >\n                {i + 1}\n              </button>\n            </li>\n          ))}\n          <li\n            className={`page-item ${\n              state.pno === Math.ceil(list.length / max) ? \"disabled\" : \"\"\n            }`}\n          >\n            <button\n              className=\"page-link\"\n              onClick={() => {\n                scrollTop()\n                setState({ pno: state.pno + 1 })\n              }}\n            >\n              Next\n            </button>\n          </li>\n        </ul>\n      </nav>\n    </>\n  )\n}\n\nexport default PaginationComponent\n","import { Link } from \"gatsby\"\nimport React from \"react\"\n\nexport const redirectController = control => {\n  if (!control) {\n  }\n}\nexport const generateSIGHash = sig_images => {\n  let img_hash = {}\n  sig_images &&\n    sig_images.forEach(element => {\n      img_hash[element.name] = element.childImageSharp.fixed.srcWebp\n    })\n  return img_hash\n}\n\nexport const RenderAuthors = (arr, cls) =>\n  arr.map((name, index2) => (\n    <>\n      <Link\n        key={\"x\" + index2}\n        to={\"/members/\" + name.toLowerCase().split(\" \").join(\"\")}\n      >\n        {name}\n      </Link>\n      {index2 + 2 === arr.length\n        ? \" and\"\n        : index2 + 1 !== arr.length\n        ? \",\"\n        : \"\"}\n    </>\n  ))\n","import { graphql, Link } from \"gatsby\"\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { RenderAuthors } from \"../components/helper\"\nimport PaginationComponent from \"../components/partials/pagination\"\n\nexport const Blog = ({ data, location }) => {\n  return (\n    <Layout location={location.pathname} title={\"Main\"}>\n      <SEO title=\"Blog\" />\n      <main className=\"page blog-post-list\">\n        <section className=\"clean-block clean-blog-list dark\">\n          <div className=\"container\">\n            <div className=\"block-heading\">\n              <h2 className=\"text-primary\">Official IET-NITK Blog</h2>\n              <p>\n                We post cool stuff. Subscribe to our Newsletter to stay updated!\n              </p>\n            </div>\n            <div className=\"block-content\">\n              <PaginationComponent\n                max={5}\n                list={data.allFile.nodes}\n                item={(element, index) => {\n                  let image = element.childMarkdownRemark.frontmatter.image\n                  image = image && image.childImageSharp.fixed.srcWebp\n                  image = image || data.ietlogo.fixed.srcWebp\n                  return (\n                    <div key={index} className=\"clean-blog-post\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-5\">\n                          <img\n                            alt={element.childMarkdownRemark.frontmatter.title}\n                            className=\"rounded img-fluid\"\n                            src={image}\n                            style={{ width: \"100%\", height: \"auto\" }}\n                          />\n                        </div>\n                        <div className=\"col-lg-7\">\n                          <h3\n                            data-toggle=\"tooltip\"\n                            title={\n                              element.childMarkdownRemark.timeToRead +\n                              \" minute read\"\n                            }\n                          >\n                            {element.childMarkdownRemark.frontmatter.title}\n                          </h3>\n                          <div className=\"info\">\n                            <span className=\"text-muted\">\n                              By{\" \"}\n                              {RenderAuthors(\n                                element.childMarkdownRemark.frontmatter.authors,\n                                \"\"\n                              )}\n                              <br />\n                              {element.childMarkdownRemark.frontmatter.date}\n                            </span>\n                          </div>\n                          <p>{element.childMarkdownRemark.excerpt}</p>\n                          <Link\n                            to={\"/blog/\" + element.relativeDirectory}\n                            className=\"btn btn-outline-primary btn-sm\"\n                            type=\"button\"\n                          >\n                            Read More\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                }}\n              />\n            </div>\n          </div>\n        </section>\n      </main>\n    </Layout>\n  )\n}\n\nexport const postQuery = graphql`\n  {\n    ietlogo: imageSharp(fixed: { originalName: { eq: \"logo-wide-1.png\" } }) {\n      fixed {\n        srcWebp\n      }\n    }\n    allFile(\n      filter: { sourceInstanceName: { eq: \"blog\" }, ext: { eq: \".md\" } }\n      sort: { fields: childMarkdownRemark___frontmatter___date, order: DESC }\n    ) {\n      nodes {\n        relativeDirectory\n        childMarkdownRemark {\n          timeToRead\n          excerpt(format: PLAIN)\n          frontmatter {\n            authors\n            title\n            image {\n              childImageSharp {\n                fixed {\n                  srcWebp\n                }\n              }\n            }\n            date(formatString: \"MMMM Do, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Blog\n"],"sourceRoot":""}