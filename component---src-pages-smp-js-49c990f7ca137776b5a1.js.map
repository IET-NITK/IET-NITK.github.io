{"version":3,"sources":["webpack:///./src/pages/smp.js","webpack:///./src/components/helper.js"],"names":["SMP","data","location","sigImages","smp","sig_images","generateSIGHash","nodes","useEffect","site_data","siteMetadata","allow","navigate","pathname","title","Date","getFullYear","className","style","paddingTop","group","map","e","i","Fragment","key","id","fieldValue","to","toLowerCase","description","RenderAuthors","mentors","target","rel","href","link","maxWidth","src","alt","img_hash","forEach","element","name","childImageSharp","fixed","srcWebp","arr","cls","index2","split","join","length"],"mappings":"4FAAA,gFA6HeA,UApHH,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACXC,EAAmBF,EAAnBE,UAAWC,EAAQH,EAARG,IACbC,EAAaC,YAAgBH,EAAUI,OAM7C,OALAC,qBAAU,YACmC,IAAxCP,EAAKQ,UAAUC,aAAaN,IAAIO,OACjCC,YAAS,QAIX,kBAAC,IAAD,CAAQV,SAAUA,EAASW,UACzB,kBAAC,IAAD,CAAKC,MAAO,QAAS,IAAIC,MAAOC,gBAChC,0BAAMC,UAAU,QACd,6BAASA,UAAU,wBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,gBAAd,iBACgB,IAAIF,MAAOC,eAE3B,gHAQR,yBAAKC,UAAU,eAAeC,MAAO,CAAEC,WAAY,QACjD,yBAAKF,UAAU,aACZb,EAAIgB,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OACb,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACnB,yBAAKN,UAAU,OACb,yBAAKA,UAAU,+BACb,wBAAIS,GAAIJ,EAAEK,WAAYV,UAAU,gBAC9B,kBAAC,IAAD,CAAMW,GAAI,SAAWN,EAAEK,WAAWE,eAC/BP,EAAEK,aAGNL,EAAEf,MAAMc,KAAI,SAACjB,EAAKmB,GAAN,OACX,oCACE,wBAAIG,GAAItB,EAAIU,OAAQV,EAAIU,OACxB,6BACE,2BACGV,EAAI0B,YADP,IAEE,6BACA,0BAAMb,UAAU,cACd,4CACCc,YAAc3B,EAAI4B,QAAS,KAE9B,6BACA,uBACEC,OAAO,SACPC,IAAI,aACJC,KAAMlC,EAAKQ,UAAUC,aAAaN,IAAIgC,MAHxC,4BAYV,yBAAKnB,UAAU,sDACb,kBAAC,IAAD,CAAMW,GAAI,SAAWN,EAAEK,WAAWE,eAChC,yBACEZ,UAAU,4BACVC,MAAO,CAAEmB,SAAU,QAASlB,WAAY,OACxCmB,IAAKjC,EAAWiB,EAAEK,YAClBY,IAAKjB,EAAEK,gBAKf,sC,kCCjFd,yGAOarB,EAAkB,SAAAD,GAC7B,IAAImC,EAAW,GAKf,OAJAnC,GACEA,EAAWoC,SAAQ,SAAAC,GACjBF,EAASE,EAAQC,MAAQD,EAAQE,gBAAgBC,MAAMC,WAEpDN,GAGIT,EAAgB,SAACgB,EAAKC,GAAN,OAC3BD,EAAI1B,KAAI,SAACsB,EAAMM,GAAP,OACN,wCAEE,kBAAC,IAAD,CACExB,IAAK,IAAMwB,EACXrB,GAAI,YAAce,EAAKd,cAAcqB,MAAM,KAAKC,KAAK,KAEpDR,GAEFM,EAAS,IAAMF,EAAIK,OAChB,OACAH,EAAS,IAAMF,EAAIK,OACnB,IACA","file":"component---src-pages-smp-js-49c990f7ca137776b5a1.js","sourcesContent":["import React, { useEffect } from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { RenderAuthors, generateSIGHash } from \"../components/helper\"\nimport { Link } from \"gatsby\"\nimport { graphql,navigate } from \"gatsby\"\n\n\n\nconst SMP = ({ data, location }) => {\n  const { sigImages, smp } = data\n  const sig_images = generateSIGHash(sigImages.nodes)\n  useEffect(()=>{\n    if(data.site_data.siteMetadata.smp.allow!==true){\n      navigate(\"/\")\n    }\n  })\n  return (\n    <Layout location={location.pathname}>\n      <SEO title={\"SMP \" + new Date().getFullYear()} />\n      <main className=\"page\">\n        <section className=\"clean-block about-us\">\n          <div className=\"container\">\n            <div className=\"block-heading\">\n              <h2 className=\"text-primary\">\n                IET NITK SMP {new Date().getFullYear()}\n              </h2>\n              <p>\n                IET NITK's Official Mentorship Program, exclusive for first and\n                second years.\n              </p>\n            </div>\n          </div>\n        </section>\n      </main>\n      <div className=\"site-section\" style={{ paddingTop: \"1em\" }}>\n        <div className=\"container\">\n          {smp.group.map((e, i) => (\n            <React.Fragment key={i}>\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-8 col-sm-12\">\n                  <h3 id={e.fieldValue} className=\"smp-signames\">\n                    <Link to={\"/sigs/\" + e.fieldValue.toLowerCase()}>\n                      {e.fieldValue}\n                    </Link>\n                  </h3>\n                  {e.nodes.map((smp, i) => (\n                    <>\n                      <h5 id={smp.title}>{smp.title}</h5>\n                      <div>\n                        <p>\n                          {smp.description}.\n                          <br />\n                          <span className=\"text-muted\">\n                            <strong>Mentors:</strong>\n                            {RenderAuthors(smp.mentors, \"\")}\n                          </span>\n                          <br />\n                          <a\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            href={data.site_data.siteMetadata.smp.link}\n                          >\n                            Click to register\n                          </a>\n                        </p>\n                      </div>\n                    </>\n                  ))}\n                </div>\n                <div className=\"col-lg-6 col-md-4 hidden-sm hidden-xs smp-logo-div\">\n                  <Link to={\"/sigs/\" + e.fieldValue.toLowerCase()}>\n                    <img\n                      className=\"mobile-invisible smp-logo\"\n                      style={{ maxWidth: \"150px\", paddingTop: \"2em\" }}\n                      src={sig_images[e.fieldValue]}\n                      alt={e.fieldValue}\n                    />\n                  </Link>\n                </div>\n              </div>\n              <hr />\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const postQuery = graphql`\n  {\n    sigImages: allFile(filter: { sourceInstanceName: { eq: \"sig_logo\" } }) {\n      nodes {\n        name\n        childImageSharp {\n          fixed {\n            srcWebp\n          }\n        }\n      }\n    }\n\n    site_data: site {\n      siteMetadata {\n        smp {\n          allow\n          link\n        }\n      }\n    }\n    smp: allSmpYaml(sort: { fields: title }) {\n      group(field: sig) {\n        nodes {\n          title\n          description\n          link\n          mentors\n        }\n        fieldValue\n      }\n    }\n  }\n`\n\nexport default SMP\n","import { Link } from \"gatsby\"\nimport React from \"react\"\n\nexport const redirectController = control => {\n  if (!control) {\n  }\n}\nexport const generateSIGHash = sig_images => {\n  let img_hash = {}\n  sig_images &&\n    sig_images.forEach(element => {\n      img_hash[element.name] = element.childImageSharp.fixed.srcWebp\n    })\n  return img_hash\n}\n\nexport const RenderAuthors = (arr, cls) =>\n  arr.map((name, index2) => (\n    <>\n      &nbsp;\n      <Link\n        key={\"x\" + index2}\n        to={\"/members/\" + name.toLowerCase().split(\" \").join(\"\")}\n      >\n        {name}\n      </Link>\n      {index2 + 2 === arr.length\n        ? \" and\"\n        : index2 + 1 !== arr.length\n        ? \",\"\n        : \"\"}\n    </>\n  ))\n"],"sourceRoot":""}