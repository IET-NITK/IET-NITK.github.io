{"version":3,"file":"789744ba-937621e2f9e2102d74ca.js","mappings":"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","sources":["webpack://ietnitk/./node_modules/@splidejs/splide/dist/js/splide.esm.js"],"sourcesContent":["/*!\n * Splide.js\n * Version  : 2.4.20\n * License  : MIT\n * Copyright: 2020 Naotoshi Fujita\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"Splide\"] = factory();else root[\"Splide\"] = factory();\n})(self, function () {\n  return (\n    /******/\n    function () {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = {\n        /***/\n        311:\n        /***/\n        function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n          // ESM COMPAT FLAG\n          __webpack_require__.r(__webpack_exports__); // EXPORTS\n\n\n          __webpack_require__.d(__webpack_exports__, {\n            \"default\": function _default() {\n              return (\n                /* binding */\n                module_Splide\n              );\n            }\n          }); // NAMESPACE OBJECT: ./src/js/constants/states.js\n\n\n          var states_namespaceObject = {};\n\n          __webpack_require__.r(states_namespaceObject);\n\n          __webpack_require__.d(states_namespaceObject, {\n            \"CREATED\": function CREATED() {\n              return _CREATED;\n            },\n            \"DESTROYED\": function DESTROYED() {\n              return _DESTROYED;\n            },\n            \"IDLE\": function IDLE() {\n              return _IDLE;\n            },\n            \"MOUNTED\": function MOUNTED() {\n              return _MOUNTED;\n            },\n            \"MOVING\": function MOVING() {\n              return _MOVING;\n            }\n          });\n\n          ; // CONCATENATED MODULE: ./src/js/core/event.js\n\n          /**\r\n           * The function for providing an Event object simply managing events.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The function for providing an Event object simply managing events.\r\n           */\n\n          /* harmony default export */\n\n          var core_event = function core_event() {\n            /**\r\n             * Store all event data.\r\n             *\r\n             * @type {Array}\r\n             */\n            var data = [];\n            var Event = {\n              /**\r\n               * Subscribe the given event(s).\r\n               *\r\n               * @param {string}   events  - An event name. Use space to separate multiple events.\r\n               *                             Also, namespace is accepted by dot, such as 'resize.{namespace}'.\r\n               * @param {function} handler - A callback function.\r\n               * @param {Element}  elm     - Optional. Native event will be listened to when this arg is provided.\r\n               * @param {Object}   options - Optional. Options for addEventListener.\r\n               */\n              on: function on(events, handler, elm, options) {\n                if (elm === void 0) {\n                  elm = null;\n                }\n\n                if (options === void 0) {\n                  options = {};\n                }\n\n                events.split(' ').forEach(function (event) {\n                  if (elm) {\n                    elm.addEventListener(event, handler, options);\n                  }\n\n                  data.push({\n                    event: event,\n                    handler: handler,\n                    elm: elm,\n                    options: options\n                  });\n                });\n              },\n\n              /**\r\n               * Unsubscribe the given event(s).\r\n               *\r\n               * @param {string}  events - A event name or names split by space.\r\n               * @param {Element} elm    - Optional. removeEventListener() will be called when this arg is provided.\r\n               */\n              off: function off(events, elm) {\n                if (elm === void 0) {\n                  elm = null;\n                }\n\n                events.split(' ').forEach(function (event) {\n                  data = data.filter(function (item) {\n                    if (item && item.event === event && item.elm === elm) {\n                      unsubscribe(item);\n                      return false;\n                    }\n\n                    return true;\n                  });\n                });\n              },\n\n              /**\r\n               * Emit an event.\r\n               * This method is only for custom events.\r\n               *\r\n               * @param {string}  event - An event name.\r\n               * @param {*}       args  - Any number of arguments passed to handlers.\r\n               */\n              emit: function emit(event) {\n                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                  args[_key - 1] = arguments[_key];\n                }\n\n                data.forEach(function (item) {\n                  if (!item.elm && item.event.split('.')[0] === event) {\n                    item.handler.apply(item, args);\n                  }\n                });\n              },\n\n              /**\r\n               * Clear event data.\r\n               */\n              destroy: function destroy() {\n                data.forEach(unsubscribe);\n                data = [];\n              }\n            };\n            /**\r\n             * Remove the registered event listener.\r\n             *\r\n             * @param {Object} item - An object containing event data.\r\n             */\n\n            function unsubscribe(item) {\n              if (item.elm) {\n                item.elm.removeEventListener(item.event, item.handler, item.options);\n              }\n            }\n\n            return Event;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/core/state.js\n\n          /**\r\n           * The function providing a super simple state system.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The function providing a super simple state system.\r\n           *\r\n           * @param {string|number} initialState - Provide the initial state value.\r\n           */\n\n          /* harmony default export */\n\n          var state = function state(initialState) {\n            /**\r\n             * Store the current state.\r\n             *\r\n             * @type {string|number}\r\n             */\n            var curr = initialState;\n            return {\n              /**\r\n               * Change state.\r\n               *\r\n               * @param {string|number} state - A new state.\r\n               */\n              set: function set(state) {\n                curr = state;\n              },\n\n              /**\r\n               * Verify if the current state is given one or not.\r\n               *\r\n               * @param {string|number} state - A state name to be verified.\r\n               *\r\n               * @return {boolean} - True if the current state is the given one.\r\n               */\n              is: function is(state) {\n                return state === curr;\n              }\n            };\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/utils/object.js\n\n          function _extends() {\n            _extends = Object.assign || function (target) {\n              for (var i = 1; i < arguments.length; i++) {\n                var source = arguments[i];\n\n                for (var key in source) {\n                  if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                  }\n                }\n              }\n\n              return target;\n            };\n\n            return _extends.apply(this, arguments);\n          }\n          /**\r\n           * Some utility functions related with Object, supporting IE.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n\n          var keys = Object.keys;\n          /**\r\n           * Iterate an object like Array.forEach.\r\n           * IE doesn't support forEach of HTMLCollection.\r\n           *\r\n           * @param {Object}    obj       - An object.\r\n           * @param {function}  callback  - A function handling each value. Arguments are value, property and index.\r\n           */\n\n          function each(obj, callback) {\n            keys(obj).some(function (key, index) {\n              return callback(obj[key], key, index);\n            });\n          }\n          /**\r\n           * Return values of the given object as an array.\r\n           * IE doesn't support Object.values.\r\n           *\r\n           * @param {Object} obj - An object.\r\n           *\r\n           * @return {Array} - An array containing all values of the given object.\r\n           */\n\n\n          function values(obj) {\n            return keys(obj).map(function (key) {\n              return obj[key];\n            });\n          }\n          /**\r\n           * Check if the given subject is object or not.\r\n           *\r\n           * @param {*} subject - A subject to be verified.\r\n           *\r\n           * @return {boolean} - True if object, false otherwise.\r\n           */\n\n\n          function isObject(subject) {\n            return typeof subject === 'object';\n          }\n          /**\r\n           * Merge two objects deeply.\r\n           *\r\n           * @param {Object} to   - An object where \"from\" is merged.\r\n           * @param {Object} from - An object merged to \"to\".\r\n           *\r\n           * @return {Object} - A merged object.\r\n           */\n\n\n          function merge(_ref, from) {\n            var to = _extends({}, _ref);\n\n            each(from, function (value, key) {\n              if (isObject(value)) {\n                if (!isObject(to[key])) {\n                  to[key] = {};\n                }\n\n                to[key] = merge(to[key], value);\n              } else {\n                to[key] = value;\n              }\n            });\n            return to;\n          }\n          /**\r\n           * Assign all properties \"from\" to \"to\" object.\r\n           *\r\n           * @param {Object} to   - An object where properties are assigned.\r\n           * @param {Object} from - An object whose properties are assigned to \"to\".\r\n           *\r\n           * @return {Object} - An assigned object.\r\n           */\n\n\n          function object_assign(to, from) {\n            keys(from).forEach(function (key) {\n              if (!to[key]) {\n                Object.defineProperty(to, key, Object.getOwnPropertyDescriptor(from, key));\n              }\n            });\n            return to;\n          }\n\n          ; // CONCATENATED MODULE: ./src/js/utils/utils.js\n\n          /**\r\n           * A package of some miscellaneous utility functions.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Convert the given value to array.\r\n           *\r\n           * @param {*} value - Any value.\r\n           *\r\n           * @return {*[]} - Array containing the given value.\r\n           */\n\n          function toArray(value) {\n            return Array.isArray(value) ? value : [value];\n          }\n          /**\r\n           * Check if the given value is between min and max.\r\n           * Min will be returned when the value is less than min or max will do when greater than max.\r\n           *\r\n           * @param {number} value - A number to be checked.\r\n           * @param {number} m1    - Minimum or maximum number.\r\n           * @param {number} m2    - Maximum or minimum number.\r\n           *\r\n           * @return {number} - A value itself, min or max.\r\n           */\n\n\n          function between(value, m1, m2) {\n            return Math.min(Math.max(value, m1 > m2 ? m2 : m1), m1 > m2 ? m1 : m2);\n          }\n          /**\r\n           * The sprintf method with minimum functionality.\r\n           *\r\n           * @param {string}       format       - The string format.\r\n           * @param {string|Array} replacements - Replacements accepting multiple arguments.\r\n           *\r\n           * @returns {string} - Converted string.\r\n           */\n\n\n          function sprintf(format, replacements) {\n            var i = 0;\n            return format.replace(/%s/g, function () {\n              return toArray(replacements)[i++];\n            });\n          }\n          /**\r\n           * Append px unit to the given subject if necessary.\r\n           *\r\n           * @param {number|string} value - A value that may not include an unit.\r\n           *\r\n           * @return {string} - If the value is string, return itself.\r\n           *                    If number, do value + \"px\". An empty string, otherwise.\r\n           */\n\n\n          function unit(value) {\n            var type = typeof value;\n\n            if (type === 'number' && value > 0) {\n              return parseFloat(value) + 'px';\n            }\n\n            return type === 'string' ? value : '';\n          }\n          /**\r\n           * Pad start with 0.\r\n           *\r\n           * @param {number} number - A number to be filled with 0.\r\n           *\r\n           * @return {string|number} - Padded number.\r\n           */\n\n\n          function pad(number) {\n            return number < 10 ? '0' + number : number;\n          }\n          /**\r\n           * Convert the given value to pixel.\r\n           *\r\n           * @param {Element}       root  - Root element where a dummy div is appended.\r\n           * @param {string|number} value - CSS value to be converted, such as 10rem.\r\n           *\r\n           * @return {number} - Pixel.\r\n           */\n\n\n          function toPixel(root, value) {\n            if (typeof value === 'string') {\n              var div = create('div', {});\n              applyStyle(div, {\n                position: 'absolute',\n                width: value\n              });\n              append(root, div);\n              value = div.clientWidth;\n              dom_remove(div);\n            }\n\n            return +value || 0;\n          }\n\n          ; // CONCATENATED MODULE: ./src/js/utils/dom.js\n\n          /**\r\n           * Some utility functions related with DOM.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Find the first element matching the given selector.\r\n           * Be aware that all selectors after a space are ignored.\r\n           *\r\n           * @param {Element|Node}  elm       - An ancestor element.\r\n           * @param {string}        selector  - DOMString.\r\n           *\r\n           * @return {Element|null} - A found element or null.\r\n           */\n\n          function find(elm, selector) {\n            return elm ? elm.querySelector(selector.split(' ')[0]) : null;\n          }\n          /**\r\n           * Find a first child having the given tag or class name.\r\n           *\r\n           * @param {Element} parent         - A parent element.\r\n           * @param {string}  tagOrClassName - A tag or class name.\r\n           *\r\n           * @return {Element|undefined} - A found element on success or undefined on failure.\r\n           */\n\n\n          function child(parent, tagOrClassName) {\n            return children(parent, tagOrClassName)[0];\n          }\n          /**\r\n           * Return chile elements that matches the provided tag or class name.\r\n           *\r\n           * @param {Element} parent         - A parent element.\r\n           * @param {string}  tagOrClassName - A tag or class name.\r\n           *\r\n           * @return {Element[]} - Found elements.\r\n           */\n\n\n          function children(parent, tagOrClassName) {\n            if (parent) {\n              return values(parent.children).filter(function (child) {\n                return hasClass(child, tagOrClassName.split(' ')[0]) || child.tagName === tagOrClassName;\n              });\n            }\n\n            return [];\n          }\n          /**\r\n           * Create an element with some optional attributes.\r\n           *\r\n           * @param {string} tag   - A tag name.\r\n           * @param {Object} attrs - An object any attribute pairs of name and value.\r\n           *\r\n           * @return {Element} - A created element.\r\n           */\n\n\n          function create(tag, attrs) {\n            var elm = document.createElement(tag);\n            each(attrs, function (value, key) {\n              return setAttribute(elm, key, value);\n            });\n            return elm;\n          }\n          /**\r\n           * Convert HTML string to DOM node.\r\n           *\r\n           * @param {string} html - HTML string.\r\n           *\r\n           * @return {Node} - A created node.\r\n           */\n\n\n          function domify(html) {\n            var div = create('div', {});\n            div.innerHTML = html;\n            return div.firstChild;\n          }\n          /**\r\n           * Remove a given element from a DOM tree.\r\n           *\r\n           * @param {Element|Element[]} elms - Element(s) to be removed.\r\n           */\n\n\n          function dom_remove(elms) {\n            toArray(elms).forEach(function (elm) {\n              if (elm) {\n                var parent = elm.parentElement;\n                parent && parent.removeChild(elm);\n              }\n            });\n          }\n          /**\r\n           * Append a child to a given element.\r\n           *\r\n           * @param {Element} parent - A parent element.\r\n           * @param {Element} child  - An element to be appended.\r\n           */\n\n\n          function append(parent, child) {\n            if (parent) {\n              parent.appendChild(child);\n            }\n          }\n          /**\r\n           * Insert an element before the reference element.\r\n           *\r\n           * @param {Element|Node} ref - A reference element.\r\n           * @param {Element}      elm - An element to be inserted.\r\n           */\n\n\n          function before(elm, ref) {\n            if (elm && ref) {\n              var parent = ref.parentElement;\n              parent && parent.insertBefore(elm, ref);\n            }\n          }\n          /**\r\n           * Apply styles to the given element.\r\n           *\r\n           * @param {Element} elm     - An element where styles are applied.\r\n           * @param {Object}  styles  - Object containing styles.\r\n           */\n\n\n          function applyStyle(elm, styles) {\n            if (elm) {\n              each(styles, function (value, prop) {\n                if (value !== null) {\n                  elm.style[prop] = value;\n                }\n              });\n            }\n          }\n          /**\r\n           * Add or remove classes to/from the element.\r\n           * This function is for internal usage.\r\n           *\r\n           * @param {Element}         elm     - An element where classes are added.\r\n           * @param {string|string[]} classes - Class names being added.\r\n           * @param {boolean}         remove  - Whether to remove or add classes.\r\n           */\n\n\n          function addOrRemoveClasses(elm, classes, remove) {\n            if (elm) {\n              toArray(classes).forEach(function (name) {\n                if (name) {\n                  elm.classList[remove ? 'remove' : 'add'](name);\n                }\n              });\n            }\n          }\n          /**\r\n           * Add classes to the element.\r\n           *\r\n           * @param {Element}          elm     - An element where classes are added.\r\n           * @param {string|string[]}  classes - Class names being added.\r\n           */\n\n\n          function addClass(elm, classes) {\n            addOrRemoveClasses(elm, classes, false);\n          }\n          /**\r\n           * Remove a class from the element.\r\n           *\r\n           * @param {Element}         elm     - An element where classes are removed.\r\n           * @param {string|string[]} classes - A class name being removed.\r\n           */\n\n\n          function removeClass(elm, classes) {\n            addOrRemoveClasses(elm, classes, true);\n          }\n          /**\r\n           * Verify if the provided element has the class or not.\r\n           *\r\n           * @param {Element} elm       - An element.\r\n           * @param {string}  className - A class name.\r\n           *\r\n           * @return {boolean} - True if the element has the class or false if not.\r\n           */\n\n\n          function hasClass(elm, className) {\n            return !!elm && elm.classList.contains(className);\n          }\n          /**\r\n           * Set attribute to the given element.\r\n           *\r\n           * @param {Element}                 elm   - An element where an attribute is assigned.\r\n           * @param {string}                  name  - Attribute name.\r\n           * @param {string|number|boolean}   value - Attribute value.\r\n           */\n\n\n          function setAttribute(elm, name, value) {\n            if (elm) {\n              elm.setAttribute(name, value);\n            }\n          }\n          /**\r\n           * Get attribute from the given element.\r\n           *\r\n           * @param {Element} elm  - An element where an attribute is assigned.\r\n           * @param {string}  name - Attribute name.\r\n           *\r\n           * @return {string} - The value of the given attribute if available. An empty string if not.\r\n           */\n\n\n          function getAttribute(elm, name) {\n            return elm ? elm.getAttribute(name) : '';\n          }\n          /**\r\n           * Remove attribute from the given element.\r\n           *\r\n           * @param {Element|Element[]} elms  - An element where an attribute is removed.\r\n           * @param {string|string[]}      names - Attribute name.\r\n           */\n\n\n          function removeAttribute(elms, names) {\n            toArray(names).forEach(function (name) {\n              toArray(elms).forEach(function (elm) {\n                return elm && elm.removeAttribute(name);\n              });\n            });\n          }\n          /**\r\n           * Return the Rect object of the provided object.\r\n           *\r\n           * @param {Element} elm - An element.\r\n           *\r\n           * @return {ClientRect|DOMRect} - A rect object.\r\n           */\n\n\n          function getRect(elm) {\n            return elm.getBoundingClientRect();\n          }\n          /**\r\n           * Trigger the given callback after all images contained by the element are loaded.\r\n           *\r\n           * @param {Element}  elm      - Element that may contain images.\r\n           * @param {Function} callback - Callback function fired right after all images are loaded.\r\n           */\n\n\n          function loaded(elm, callback) {\n            var images = elm.querySelectorAll('img');\n            var length = images.length;\n\n            if (length) {\n              var count = 0;\n              each(images, function (img) {\n                img.onload = img.onerror = function () {\n                  if (++count === length) {\n                    callback();\n                  }\n                };\n              });\n            } else {\n              // Trigger the callback immediately if there is no image.\n              callback();\n            }\n          }\n\n          ; // CONCATENATED MODULE: ./src/js/constants/types.js\n\n          /**\r\n           * Export slider types.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Normal slider.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var SLIDE = 'slide';\n          /**\r\n           * Loop after the last slide and before the first one.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var LOOP = 'loop';\n          /**\r\n           * The track doesn't move.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var FADE = 'fade';\n          ; // CONCATENATED MODULE: ./src/js/transitions/slide/index.js\n\n          /**\r\n           * The component for general slide effect transition.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for general slide effect transition.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var slide = function slide(Splide, Components) {\n            /**\r\n             * Hold the list element.\r\n             *\r\n             * @type {Element}\r\n             */\n            var list;\n            /**\r\n             * Hold the onEnd callback function.\r\n             *\r\n             * @type {function}\r\n             */\n\n            var endCallback;\n            return {\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                list = Components.Elements.list;\n                Splide.on('transitionend', function (e) {\n                  if (e.target === list && endCallback) {\n                    endCallback();\n                  }\n                }, list);\n              },\n\n              /**\r\n               * Start transition.\r\n               *\r\n               * @param {number}   destIndex - Destination slide index that might be clone's.\r\n               * @param {number}   newIndex  - New index.\r\n               * @param {number}   prevIndex - Previous index.\r\n               * @param {Object}   coord     - Destination coordinates.\r\n               * @param {function} done      - Callback function must be invoked when transition is completed.\r\n               */\n              start: function start(destIndex, newIndex, prevIndex, coord, done) {\n                var options = Splide.options;\n                var edgeIndex = Components.Controller.edgeIndex;\n                var speed = options.speed;\n                endCallback = done;\n\n                if (Splide.is(SLIDE)) {\n                  if (prevIndex === 0 && newIndex >= edgeIndex || prevIndex >= edgeIndex && newIndex === 0) {\n                    speed = options.rewindSpeed || speed;\n                  }\n                }\n\n                applyStyle(list, {\n                  transition: \"transform \" + speed + \"ms \" + options.easing,\n                  transform: \"translate(\" + coord.x + \"px,\" + coord.y + \"px)\"\n                });\n              }\n            };\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/transitions/fade/index.js\n\n          /**\r\n           * The component for fade transition.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for fade transition.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var fade = function fade(Splide, Components) {\n            var Fade = {\n              /**\r\n               * Called when the component is mounted.\r\n               * Apply transition style to the first slide.\r\n               */\n              mount: function mount() {\n                apply(Splide.index);\n              },\n\n              /**\r\n               * Start transition.\r\n               *\r\n               * @param {number}    destIndex - Destination slide index that might be clone's.\r\n               * @param {number}    newIndex  - New index.\r\n               * @param {number}    prevIndex - Previous index.\r\n               * @param {Object}    coord     - Destination coordinates.\r\n               * @param {function}  done      - Callback function must be invoked when transition is completed.\r\n               */\n              start: function start(destIndex, newIndex, prevIndex, coord, done) {\n                var track = Components.Elements.track;\n                applyStyle(track, {\n                  height: unit(track.clientHeight)\n                });\n                apply(newIndex);\n                setTimeout(function () {\n                  done();\n                  applyStyle(track, {\n                    height: ''\n                  });\n                });\n              }\n            };\n            /**\r\n             * Apply transition style to the slide specified by the given index.\r\n             *\r\n             * @param {number} index - A slide index.\r\n             */\n\n            function apply(index) {\n              var options = Splide.options;\n              applyStyle(Components.Elements.slides[index], {\n                transition: \"opacity \" + options.speed + \"ms \" + options.easing\n              });\n            }\n\n            return Fade;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/transitions/index.js\n\n          /**\r\n           * Export transition components.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          ; // CONCATENATED MODULE: ./src/js/core/composer.js\n\n          /**\r\n           * Provide a function for composing components.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Compose components.\r\n           *\r\n           * @param {Splide}   Splide     - Splide instance.\r\n           * @param {Object}   Components - Additional components.\r\n           * @param {function} Transition - Change component for transition.\r\n           *\r\n           * @return {Object} - An object containing all components.\r\n           */\n\n          function compose(Splide, Components, Transition) {\n            var components = {};\n            each(Components, function (Component, name) {\n              components[name] = Component(Splide, components, name.toLowerCase());\n            });\n\n            if (!Transition) {\n              Transition = Splide.is(FADE) ? fade : slide;\n            }\n\n            components.Transition = Transition(Splide, components);\n            return components;\n          }\n\n          ; // CONCATENATED MODULE: ./src/js/utils/error.js\n\n          /**\r\n           * Utility functions for outputting logs.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Prefix of an error massage.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var MESSAGE_PREFIX = '[SPLIDE]';\n          /**\r\n           * Display an error message on the browser console.\r\n           *\r\n           * @param {string} message - An error message.\r\n           */\n\n          function error(message) {\n            console.error(MESSAGE_PREFIX + \" \" + message);\n          }\n          /**\r\n           * Check existence of the given object and throw an error if it doesn't.\r\n           *\r\n           * @throws {Error}\r\n           *\r\n           * @param {*}      subject - A subject to be confirmed.\r\n           * @param {string} message - An error message.\r\n           */\n\n\n          function exist(subject, message) {\n            if (!subject) {\n              throw new Error(message);\n            }\n          }\n\n          ; // CONCATENATED MODULE: ./src/js/constants/classes.js\n\n          /**\r\n           * Export class names.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * A root class name.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var ROOT = 'splide';\n          /**\r\n           * The definition table of all classes for elements.\r\n           * They might be modified by options.\r\n           *\r\n           * @type {Object}\r\n           */\n\n          var ELEMENT_CLASSES = {\n            root: ROOT,\n            slider: ROOT + \"__slider\",\n            track: ROOT + \"__track\",\n            list: ROOT + \"__list\",\n            slide: ROOT + \"__slide\",\n            container: ROOT + \"__slide__container\",\n            arrows: ROOT + \"__arrows\",\n            arrow: ROOT + \"__arrow\",\n            prev: ROOT + \"__arrow--prev\",\n            next: ROOT + \"__arrow--next\",\n            pagination: ROOT + \"__pagination\",\n            page: ROOT + \"__pagination__page\",\n            clone: ROOT + \"__slide--clone\",\n            progress: ROOT + \"__progress\",\n            bar: ROOT + \"__progress__bar\",\n            autoplay: ROOT + \"__autoplay\",\n            play: ROOT + \"__play\",\n            pause: ROOT + \"__pause\",\n            spinner: ROOT + \"__spinner\",\n            sr: ROOT + \"__sr\"\n          };\n          /**\r\n           * Definitions of status classes.\r\n           *\r\n           * @type {Object}\r\n           */\n\n          var STATUS_CLASSES = {\n            active: 'is-active',\n            visible: 'is-visible',\n            loading: 'is-loading'\n          };\n          ; // CONCATENATED MODULE: ./src/js/constants/i18n.js\n\n          /**\r\n           * Export i18n texts as object.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Texts for i18n.\r\n           *\r\n           * @type {Object}\r\n           */\n\n          var I18N = {\n            prev: 'Previous slide',\n            next: 'Next slide',\n            first: 'Go to first slide',\n            last: 'Go to last slide',\n            slideX: 'Go to slide %s',\n            pageX: 'Go to page %s',\n            play: 'Start autoplay',\n            pause: 'Pause autoplay'\n          };\n          ; // CONCATENATED MODULE: ./src/js/constants/defaults.js\n\n          /**\r\n           * Export default options.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          var DEFAULTS = {\n            /**\r\n             * Determine a slider type.\r\n             * - 'slide': Regular slider.\r\n             * - 'loop' : Carousel slider.\r\n             * - 'fade' : Change slides with fade transition. perPage, drag options are ignored.\r\n             *\r\n             * @type {string}\r\n             */\n            type: 'slide',\n\n            /**\r\n             * Whether to rewind a slider before the first slide or after the last one.\r\n             * In \"loop\" mode, this option is ignored.\r\n             *\r\n             * @type {boolean}\r\n             */\n            rewind: false,\n\n            /**\r\n             * Transition speed in milliseconds.\r\n             *\r\n             * @type {number}\r\n             */\n            speed: 400,\n\n            /**\r\n             * Transition speed on rewind in milliseconds.\r\n             *\r\n             * @type {number}\r\n             */\n            rewindSpeed: 0,\n\n            /**\r\n             * Whether to prevent any actions while a slider is transitioning.\r\n             * If false, navigation, drag and swipe work while the slider is running.\r\n             * Even so, it will be forced to wait for transition in some cases in the loop mode to shift a slider.\r\n             *\r\n             * @type {boolean}\r\n             */\n            waitForTransition: true,\n\n            /**\r\n             * Define slider max width.\r\n             *\r\n             * @type {number}\r\n             */\n            width: 0,\n\n            /**\r\n             * Define slider height.\r\n             *\r\n             * @type {number}\r\n             */\n            height: 0,\n\n            /**\r\n             * Fix width of slides. CSS format is allowed such as 10em, 80% or 80vw.\r\n             * perPage number will be ignored when this option is falsy.\r\n             *\r\n             * @type {number|string}\r\n             */\n            fixedWidth: 0,\n\n            /**\r\n             * Fix height of slides. CSS format is allowed such as 10em, 80vh but % unit is not accepted.\r\n             * heightRatio option will be ignored when this option is falsy.\r\n             *\r\n             * @type {number|string}\r\n             */\n            fixedHeight: 0,\n\n            /**\r\n             * Determine height of slides by ratio to a slider width.\r\n             * This will be ignored when the fixedHeight is provided.\r\n             *\r\n             * @type {number}\r\n             */\n            heightRatio: 0,\n\n            /**\r\n             * If true, slide width will be determined by the element width itself.\r\n             * - perPage/perMove should be 1.\r\n             *\r\n             * @type {boolean}\r\n             */\n            autoWidth: false,\n\n            /**\r\n             * If true, slide height will be determined by the element width itself.\r\n             * - perPage/perMove should be 1.\r\n             *\r\n             * @type {boolean}\r\n             */\n            autoHeight: false,\n\n            /**\r\n             * Determine how many slides should be displayed per page.\r\n             *\r\n             * @type {number}\r\n             */\n            perPage: 1,\n\n            /**\r\n             * Determine how many slides should be moved when a slider goes to next or perv.\r\n             *\r\n             * @type {number}\r\n             */\n            perMove: 0,\n\n            /**\r\n             * Determine manually how many clones should be generated on the left and right side.\r\n             * The total number of clones will be twice of this number.\r\n             *\r\n             * @type {number}\r\n             */\n            clones: 0,\n\n            /**\r\n             * Start index.\r\n             *\r\n             * @type {number}\r\n             */\n            start: 0,\n\n            /**\r\n             * Determine which slide should be focused if there are multiple slides in a page.\r\n             * A string \"center\" is acceptable for centering slides.\r\n             *\r\n             * @type {boolean|number|string}\r\n             */\n            focus: false,\n\n            /**\r\n             * Gap between slides. CSS format is allowed such as 1em.\r\n             *\r\n             * @type {number|string}\r\n             */\n            gap: 0,\n\n            /**\r\n             * Set padding-left/right in horizontal mode or padding-top/bottom in vertical one.\r\n             * Give a single value to set a same size for both sides or\r\n             * do an object for different sizes.\r\n             * Also, CSS format is allowed such as 1em.\r\n             *\r\n             * @example\r\n             * - 10: Number\r\n             * - '1em': CSS format.\r\n             * - { left: 0, right: 20 }: Object for different sizes in horizontal mode.\r\n             * - { top: 0, bottom: 20 }: Object for different sizes in vertical mode.\r\n             *\r\n             * @type {number|string|Object}\r\n             */\n            padding: 0,\n\n            /**\r\n             * Whether to append arrows.\r\n             *\r\n             * @type {boolean}\r\n             */\n            arrows: true,\n\n            /**\r\n             * Change the arrow SVG path like 'm7.61 0.807-2.12...'.\r\n             *\r\n             * @type {string}\r\n             */\n            arrowPath: '',\n\n            /**\r\n             * Whether to append pagination(indicator dots) or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n            pagination: true,\n\n            /**\r\n             * Activate autoplay.\r\n             *\r\n             * @type {boolean}\r\n             */\n            autoplay: false,\n\n            /**\r\n             * Autoplay interval in milliseconds.\r\n             *\r\n             * @type {number}\r\n             */\n            interval: 5000,\n\n            /**\r\n             * Whether to stop autoplay when a slider is hovered.\r\n             *\r\n             * @type {boolean}\r\n             */\n            pauseOnHover: true,\n\n            /**\r\n             * Whether to stop autoplay when a slider elements are focused.\r\n             * True is recommended for accessibility.\r\n             *\r\n             * @type {boolean}\r\n             */\n            pauseOnFocus: true,\n\n            /**\r\n             * Whether to reset progress of the autoplay timer when resumed.\r\n             *\r\n             * @type {boolean}\r\n             */\n            resetProgress: true,\n\n            /**\r\n             * Loading images lazily.\r\n             * Image src must be provided by a data-splide-lazy attribute.\r\n             *\r\n             * - false: Do nothing.\r\n             * - 'nearby': Only images around an active slide will be loaded.\r\n             * - 'sequential': All images will be sequentially loaded.\r\n             *\r\n             * @type {boolean|string}\r\n             */\n            lazyLoad: false,\n\n            /**\r\n             * This option works only when a lazyLoad option is \"nearby\".\r\n             * Determine how many pages(not slides) around an active slide should be loaded beforehand.\r\n             *\r\n             * @type {number}\r\n             */\n            preloadPages: 1,\n\n            /**\r\n             * Easing for CSS transition. For example, linear, ease or cubic-bezier().\r\n             *\r\n             * @type {string}\r\n             */\n            easing: 'cubic-bezier(.42,.65,.27,.99)',\n\n            /**\r\n             * Whether to enable keyboard shortcuts\r\n             * - true or 'global': Listen to keydown event of the document.\r\n             * - 'focused': Listen to the keydown event of the slider root element. tabindex=\"0\" will be added to the element.\r\n             * - false: Disable keyboard shortcuts.\r\n             *\r\n             * @type {boolean|string}\r\n             */\n            keyboard: 'global',\n\n            /**\r\n             * Whether to allow mouse drag and touch swipe.\r\n             *\r\n             * @type {boolean}\r\n             */\n            drag: true,\n\n            /**\r\n             * The angle threshold for drag.\r\n             * The slider starts moving only when the drag angle is less than this threshold.\r\n             *\r\n             * @type {number}\r\n             */\n            dragAngleThreshold: 30,\n\n            /**\r\n             * Distance threshold for determining if the action is \"flick\" or \"swipe\".\r\n             * When a drag distance is over this value, the action will be treated as \"swipe\", not \"flick\".\r\n             *\r\n             * @type {number}\r\n             */\n            swipeDistanceThreshold: 150,\n\n            /**\r\n             * Velocity threshold for determining if the action is \"flick\" or \"swipe\".\r\n             * Around 0.5 is recommended.\r\n             *\r\n             * @type {number}\r\n             */\n            flickVelocityThreshold: .6,\n\n            /**\r\n             * Determine power of flick. The larger number this is, the farther a slider runs by flick.\r\n             * Around 500 is recommended.\r\n             *\r\n             * @type {number}\r\n             */\n            flickPower: 600,\n\n            /**\r\n             * Limit a number of pages to move by flick.\r\n             *\r\n             * @type {number}\r\n             */\n            flickMaxPages: 1,\n\n            /**\r\n             * Slider direction.\r\n             * - 'ltr': Left to right.\r\n             * - 'rtl': Right to left.\r\n             * - 'ttb': Top to bottom.\r\n             *\r\n             * @type {string}\r\n             */\n            direction: 'ltr',\n\n            /**\r\n             * Set img src to background-image of its parent element.\r\n             * Images with various sizes can be displayed as same dimension without cropping work.\r\n             * fixedHeight or heightRatio is required.\r\n             *\r\n             * @type {boolean}\r\n             */\n            cover: false,\n\n            /**\r\n             * Whether to enable accessibility(aria and screen reader texts) or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n            accessibility: true,\n\n            /**\r\n             * Whether to add tabindex=\"0\" to visible slides or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n            slideFocus: true,\n\n            /**\r\n             * Determine if a slider is navigation for another.\r\n             * Use \"sync\" API to synchronize two sliders.\r\n             *\r\n             * @type {boolean}\r\n             */\n            isNavigation: false,\n\n            /**\r\n             * Whether to trim spaces before the fist slide or after the last one when \"focus\" is not 0.\r\n             *\r\n             * @type {boolean}\r\n             */\n            trimSpace: true,\n\n            /**\r\n             * The \"is-active\" class is added after transition as default.\r\n             * If true, it will be added before move.\r\n             *\r\n             * @type {boolean}\r\n             */\n            updateOnMove: false,\n\n            /**\r\n             * Throttle duration in milliseconds for the resize event.\r\n             *\r\n             * @type {number}\r\n             */\n            throttle: 100,\n\n            /**\r\n             * Whether to destroy a slider or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n            destroy: false,\n\n            /**\r\n             * Options for specific breakpoints.\r\n             *\r\n             * @example\r\n             * {\r\n             *   1000: {\r\n             *     perPage: 3,\r\n             *     gap: 20\r\n             *   },\r\n             *   600: {\r\n             *     perPage: 1,\r\n             *     gap: 5,\r\n             *   }\r\n             * }\r\n             *\r\n             * @type {boolean|Object}\r\n             */\n            breakpoints: false,\n\n            /**\r\n             * Collection of class names.\r\n             *\r\n             * @see ./classes.js\r\n             *\r\n             * @type {Object}\r\n             */\n            classes: ELEMENT_CLASSES,\n\n            /**\r\n             * Collection of i18n texts.\r\n             *\r\n             * @see ./i18n.js\r\n             *\r\n             * @type {Object}\r\n             */\n            i18n: I18N\n          };\n          ; // CONCATENATED MODULE: ./src/js/constants/states.js\n\n          /**\r\n           * Export state constants.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Splide has been just created.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var _CREATED = 1;\n          /**\r\n           * All components have been mounted and initialized.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var _MOUNTED = 2;\n          /**\r\n           * Splide is ready for transition.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var _IDLE = 3;\n          /**\r\n           * Splide is moving.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var _MOVING = 4;\n          /**\r\n           * Splide is moving.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var _DESTROYED = 5;\n          ; // CONCATENATED MODULE: ./src/js/splide.js\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n          }\n          /**\r\n           * The main class for applying Splide to an element.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The main class for applying Splide to an element,\r\n           * providing some APIs to control the behavior.\r\n           */\n\n\n          var Splide = /*#__PURE__*/function () {\n            /**\r\n             * Splide constructor.\r\n             *\r\n             * @throws {Error} When the given root element or selector is invalid.\r\n             *\r\n             * @param {Element|string}  root       - A selector for a root element or an element itself.\r\n             * @param {Object}          options    - Optional. Options to change default behaviour.\r\n             * @param {Object}          Components - Optional. Components.\r\n             */\n            function Splide(root, options, Components) {\n              if (options === void 0) {\n                options = {};\n              }\n\n              if (Components === void 0) {\n                Components = {};\n              }\n\n              this.root = root instanceof Element ? root : document.querySelector(root);\n              exist(this.root, 'An invalid element/selector was given.');\n              this.Components = null;\n              this.Event = core_event();\n              this.State = state(_CREATED);\n              this.STATES = states_namespaceObject;\n              this._o = merge(DEFAULTS, options);\n              this._i = 0;\n              this._c = Components;\n              this._e = {}; // Extensions\n\n              this._t = null; // Transition\n            }\n            /**\r\n             * Compose and mount components.\r\n             *\r\n             * @param {Object}   Extensions - Optional. Additional components.\r\n             * @param {function} Transition - Optional. Set a custom transition component.\r\n             *\r\n             * @return {Splide|undefined} - This instance or undefined if an exception occurred.\r\n             */\n\n\n            var _proto = Splide.prototype;\n\n            _proto.mount = function mount(Extensions, Transition) {\n              var _this = this;\n\n              if (Extensions === void 0) {\n                Extensions = this._e;\n              }\n\n              if (Transition === void 0) {\n                Transition = this._t;\n              } // Reset the state.\n\n\n              this.State.set(_CREATED);\n              this._e = Extensions;\n              this._t = Transition;\n              this.Components = compose(this, merge(this._c, Extensions), Transition);\n\n              try {\n                each(this.Components, function (component, key) {\n                  var required = component.required;\n\n                  if (required === undefined || required) {\n                    component.mount && component.mount();\n                  } else {\n                    delete _this.Components[key];\n                  }\n                });\n              } catch (e) {\n                error(e.message);\n                return;\n              }\n\n              var State = this.State;\n              State.set(_MOUNTED);\n              each(this.Components, function (component) {\n                component.mounted && component.mounted();\n              });\n              this.emit('mounted');\n              State.set(_IDLE);\n              this.emit('ready');\n              applyStyle(this.root, {\n                visibility: 'visible'\n              });\n              this.on('move drag', function () {\n                return State.set(_MOVING);\n              }).on('moved dragged', function () {\n                return State.set(_IDLE);\n              });\n              return this;\n            }\n            /**\r\n             * Set sync target.\r\n             *\r\n             * @param {Splide} splide - A Splide instance.\r\n             *\r\n             * @return {Splide} - This instance.\r\n             */\n            ;\n\n            _proto.sync = function sync(splide) {\n              this.sibling = splide;\n              return this;\n            }\n            /**\r\n             * Register callback fired on the given event(s).\r\n             *\r\n             * @param {string}   events  - An event name. Use space to separate multiple events.\r\n             *                             Also, namespace is accepted by dot, such as 'resize.{namespace}'.\r\n             * @param {function} handler - A callback function.\r\n             * @param {Element}  elm     - Optional. Native event will be listened to when this arg is provided.\r\n             * @param {Object}   options - Optional. Options for addEventListener.\r\n             *\r\n             * @return {Splide} - This instance.\r\n             */\n            ;\n\n            _proto.on = function on(events, handler, elm, options) {\n              if (elm === void 0) {\n                elm = null;\n              }\n\n              if (options === void 0) {\n                options = {};\n              }\n\n              this.Event.on(events, handler, elm, options);\n              return this;\n            }\n            /**\r\n             * Unsubscribe the given event.\r\n             *\r\n             * @param {string}  events - A event name.\r\n             * @param {Element} elm    - Optional. removeEventListener() will be called when this arg is provided.\r\n             *\r\n             * @return {Splide} - This instance.\r\n             */\n            ;\n\n            _proto.off = function off(events, elm) {\n              if (elm === void 0) {\n                elm = null;\n              }\n\n              this.Event.off(events, elm);\n              return this;\n            }\n            /**\r\n             * Emit an event.\r\n             *\r\n             * @param {string} event - An event name.\r\n             * @param {*}      args  - Any number of arguments passed to handlers.\r\n             */\n            ;\n\n            _proto.emit = function emit(event) {\n              var _this$Event;\n\n              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n              }\n\n              (_this$Event = this.Event).emit.apply(_this$Event, [event].concat(args));\n\n              return this;\n            }\n            /**\r\n             * Go to the slide specified by the given control.\r\n             *\r\n             * @param {string|number} control - A control pattern.\r\n             * @param {boolean}       wait    - Optional. Whether to wait for transition.\r\n             */\n            ;\n\n            _proto.go = function go(control, wait) {\n              if (wait === void 0) {\n                wait = this.options.waitForTransition;\n              }\n\n              if (this.State.is(_IDLE) || this.State.is(_MOVING) && !wait) {\n                this.Components.Controller.go(control, false);\n              }\n\n              return this;\n            }\n            /**\r\n             * Verify whether the slider type is the given one or not.\r\n             *\r\n             * @param {string} type - A slider type.\r\n             *\r\n             * @return {boolean} - True if the slider type is the provided type or false if not.\r\n             */\n            ;\n\n            _proto.is = function is(type) {\n              return type === this._o.type;\n            }\n            /**\r\n             * Insert a slide.\r\n             *\r\n             * @param {Element|string} slide - A slide element to be added.\r\n             * @param {number}         index - A slide will be added at the position.\r\n             */\n            ;\n\n            _proto.add = function add(slide, index) {\n              if (index === void 0) {\n                index = -1;\n              }\n\n              this.Components.Elements.add(slide, index, this.refresh.bind(this));\n              return this;\n            }\n            /**\r\n             * Remove the slide designated by the index.\r\n             *\r\n             * @param {number} index - A slide index.\r\n             */\n            ;\n\n            _proto.remove = function remove(index) {\n              this.Components.Elements.remove(index);\n              this.refresh();\n              return this;\n            }\n            /**\r\n             * Destroy all Slide objects and clones and recreate them again.\r\n             */\n            ;\n\n            _proto.refresh = function refresh() {\n              this.emit('refresh:before').emit('refresh').emit('resize');\n              return this;\n            }\n            /**\r\n             * Destroy the Splide.\r\n             * \"Completely\" boolean is mainly for breakpoints.\r\n             *\r\n             * @param {boolean} completely - Destroy completely.\r\n             */\n            ;\n\n            _proto.destroy = function destroy(completely) {\n              var _this2 = this;\n\n              if (completely === void 0) {\n                completely = true;\n              } // Postpone destroy because it should be done after mount.\n\n\n              if (this.State.is(_CREATED)) {\n                this.on('ready', function () {\n                  return _this2.destroy(completely);\n                });\n                return;\n              }\n\n              values(this.Components).reverse().forEach(function (component) {\n                component.destroy && component.destroy(completely);\n              });\n              this.emit('destroy', completely); // Destroy all event handlers, including ones for native events.\n\n              this.Event.destroy();\n              this.State.set(_DESTROYED);\n              return this;\n            }\n            /**\r\n             * Return the current slide index.\r\n             *\r\n             * @return {number} - The current slide index.\r\n             // */\n            ;\n\n            _createClass(Splide, [{\n              key: \"index\",\n              get: function get() {\n                return this._i;\n              }\n              /**\r\n               * Set the current slide index.\r\n               *\r\n               * @param {number|string} index - A new index.\r\n               */\n              ,\n              set: function set(index) {\n                this._i = parseInt(index);\n              }\n              /**\r\n               * Return length of slides.\r\n               * This is an alias of Elements.length.\r\n               *\r\n               * @return {number} - A number of slides.\r\n               */\n\n            }, {\n              key: \"length\",\n              get: function get() {\n                return this.Components.Elements.length;\n              }\n              /**\r\n               * Return options.\r\n               *\r\n               * @return {Object} - Options object.\r\n               */\n\n            }, {\n              key: \"options\",\n              get: function get() {\n                return this._o;\n              }\n              /**\r\n               * Set options with merging the given object to the current one.\r\n               *\r\n               * @param {Object} options - New options.\r\n               */\n              ,\n              set: function set(options) {\n                var created = this.State.is(_CREATED);\n\n                if (!created) {\n                  this.emit('update');\n                }\n\n                this._o = merge(this._o, options);\n\n                if (!created) {\n                  this.emit('updated', this._o);\n                }\n              }\n              /**\r\n               * Return the class list.\r\n               * This is an alias of Splide.options.classList.\r\n               *\r\n               * @return {Object} - An object containing all class list.\r\n               */\n\n            }, {\n              key: \"classes\",\n              get: function get() {\n                return this._o.classes;\n              }\n              /**\r\n               * Return the i18n strings.\r\n               * This is an alias of Splide.options.i18n.\r\n               *\r\n               * @return {Object} - An object containing all i18n strings.\r\n               */\n\n            }, {\n              key: \"i18n\",\n              get: function get() {\n                return this._o.i18n;\n              }\n            }]);\n\n            return Splide;\n          }();\n\n          ; // CONCATENATED MODULE: ./src/js/components/options/index.js\n\n          /**\r\n           * The component for initializing options.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for initializing options.\r\n           *\r\n           * @param {Splide} Splide - A Splide instance.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var options = function options(Splide) {\n            /**\r\n             * Retrieve options from the data attribute.\r\n             * Note that IE10 doesn't support dataset property.\r\n             *\r\n             * @type {string}\r\n             */\n            var options = getAttribute(Splide.root, 'data-splide');\n\n            if (options) {\n              try {\n                Splide.options = JSON.parse(options);\n              } catch (e) {\n                error(e.message);\n              }\n            }\n\n            return {\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                if (Splide.State.is(_CREATED)) {\n                  Splide.index = Splide.options.start;\n                }\n              }\n            };\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/constants/directions.js\n\n          /**\r\n           * Export layout modes.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Enumerate slides from left to right.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var LTR = 'ltr';\n          /**\r\n           * Enumerate slides from right to left.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var RTL = 'rtl';\n          /**\r\n           * Enumerate slides in a col.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var TTB = 'ttb';\n          ; // CONCATENATED MODULE: ./src/js/components/elements/slide.js\n\n          /**\r\n           * The sub component for handling each slide.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Events for restoring original styles.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var STYLE_RESTORE_EVENTS = 'update.slide';\n          /**\r\n           * The sub component for handling each slide.\r\n           *\r\n           * @param {Splide}  Splide    - A Splide instance.\r\n           * @param {number}  index     - An unique slide index.\r\n           * @param {number}  realIndex - Clones should pass a real slide index.\r\n           * @param {Element} slide     - A slide element.\r\n           *\r\n           * @return {Object} - The sub component object.\r\n           */\n\n          /* harmony default export */\n\n          var elements_slide = function elements_slide(Splide, index, realIndex, slide) {\n            /**\r\n             * Whether to update \"is-active\" class before or after transition.\r\n             *\r\n             * @type {boolean}\r\n             */\n            var updateOnMove = Splide.options.updateOnMove;\n            /**\r\n             * Events when the slide status is updated.\r\n             * Append a namespace to remove listeners later.\r\n             *\r\n             * @type {string}\r\n             */\n\n            var STATUS_UPDATE_EVENTS = 'ready.slide updated.slide resized.slide moved.slide' + (updateOnMove ? ' move.slide' : '');\n            /**\r\n             * Slide sub component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Slide = {\n              /**\r\n               * Slide element.\r\n               *\r\n               * @type {Element}\r\n               */\n              slide: slide,\n\n              /**\r\n               * Slide index.\r\n               *\r\n               * @type {number}\r\n               */\n              index: index,\n\n              /**\r\n               * Real index for clones.\r\n               *\r\n               * @type {number}\r\n               */\n              realIndex: realIndex,\n\n              /**\r\n               * Container element if available.\r\n               *\r\n               * @type {Element|undefined}\r\n               */\n              container: child(slide, Splide.classes.container),\n\n              /**\r\n               * Whether this is a cloned slide or not.\r\n               *\r\n               * @type {boolean}\r\n               */\n              isClone: realIndex > -1,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                var _this = this;\n\n                if (!this.isClone) {\n                  slide.id = Splide.root.id + \"-slide\" + pad(index + 1);\n                }\n\n                Splide.on(STATUS_UPDATE_EVENTS, function () {\n                  return _this.update();\n                }).on(STYLE_RESTORE_EVENTS, restoreStyles).on('click', function () {\n                  return Splide.emit('click', _this);\n                }, slide);\n                /*\r\n                 * Add \"is-active\" class to a clone element temporarily\r\n                 * and it will be removed on \"moved\" event.\r\n                 */\n\n                if (updateOnMove) {\n                  Splide.on('move.slide', function (newIndex) {\n                    if (newIndex === realIndex) {\n                      _update(true, false);\n                    }\n                  });\n                } // Make sure the slide is shown.\n\n\n                applyStyle(slide, {\n                  display: ''\n                }); // Hold the original styles.\n\n                this.styles = getAttribute(slide, 'style') || '';\n              },\n\n              /**\r\n               * Destroy.\r\n               */\n              destroy: function destroy() {\n                Splide.off(STATUS_UPDATE_EVENTS).off(STYLE_RESTORE_EVENTS).off('click', slide);\n                removeClass(slide, values(STATUS_CLASSES));\n                restoreStyles();\n                removeAttribute(this.container, 'style');\n              },\n\n              /**\r\n               * Update active and visible status.\r\n               */\n              update: function update() {\n                _update(this.isActive(), false);\n\n                _update(this.isVisible(), true);\n              },\n\n              /**\r\n               * Check whether this slide is active or not.\r\n               *\r\n               * @return {boolean} - True if the slide is active or false if not.\r\n               */\n              isActive: function isActive() {\n                return Splide.index === index;\n              },\n\n              /**\r\n               * Check whether this slide is visible in the viewport or not.\r\n               *\r\n               * @return {boolean} - True if the slide is visible or false if not.\r\n               */\n              isVisible: function isVisible() {\n                var active = this.isActive();\n\n                if (Splide.is(FADE) || active) {\n                  return active;\n                }\n\n                var ceil = Math.ceil;\n                var trackRect = getRect(Splide.Components.Elements.track);\n                var slideRect = getRect(slide);\n\n                if (Splide.options.direction === TTB) {\n                  return trackRect.top <= slideRect.top && slideRect.bottom <= ceil(trackRect.bottom);\n                }\n\n                return trackRect.left <= slideRect.left && slideRect.right <= ceil(trackRect.right);\n              },\n\n              /**\r\n               * Calculate how far this slide is from another slide and\r\n               * return true if the distance is within the given number.\r\n               *\r\n               * @param {number} from   - Index of a target slide.\r\n               * @param {number} within - True if the slide is within this number.\r\n               *\r\n               * @return {boolean} - True if the slide is within the number or false otherwise.\r\n               */\n              isWithin: function isWithin(from, within) {\n                var diff = Math.abs(from - index);\n\n                if (!Splide.is(SLIDE) && !this.isClone) {\n                  diff = Math.min(diff, Splide.length - diff);\n                }\n\n                return diff < within;\n              }\n            };\n            /**\r\n             * Update classes for activity or visibility.\r\n             *\r\n             * @param {boolean} active        - Is active/visible or not.\r\n             * @param {boolean} forVisibility - Toggle classes for activity or visibility.\r\n             */\n\n            function _update(active, forVisibility) {\n              var type = forVisibility ? 'visible' : 'active';\n              var className = STATUS_CLASSES[type];\n\n              if (active) {\n                addClass(slide, className);\n                Splide.emit(\"\" + type, Slide);\n              } else {\n                if (hasClass(slide, className)) {\n                  removeClass(slide, className);\n                  Splide.emit(\"\" + (forVisibility ? 'hidden' : 'inactive'), Slide);\n                }\n              }\n            }\n            /**\r\n             * Restore the original styles.\r\n             */\n\n\n            function restoreStyles() {\n              setAttribute(slide, 'style', Slide.styles);\n            }\n\n            return Slide;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/elements/index.js\n\n          /**\r\n           * The component for main elements.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The property name for UID stored in a window object.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var UID_NAME = 'uid';\n          /**\r\n           * The component for main elements.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var components_elements = function components_elements(Splide, Components) {\n            /**\r\n             * Hold the root element.\r\n             *\r\n             * @type {Element}\r\n             */\n            var root = Splide.root;\n            /**\r\n             * Hold the class list.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var classes = Splide.classes;\n            /**\r\n             * Store Slide objects.\r\n             *\r\n             * @type {Array}\r\n             */\n\n            var Slides = [];\n            /*\r\n             * Assign unique ID to the root element if it doesn't have the one.\r\n             * Note that IE doesn't support padStart() to fill the uid by 0.\r\n             */\n\n            if (!root.id) {\n              window.splide = window.splide || {};\n              var uid = window.splide[UID_NAME] || 0;\n              window.splide[UID_NAME] = ++uid;\n              root.id = \"splide\" + pad(uid);\n            }\n            /**\r\n             * Elements component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n\n            var Elements = {\n              /**\r\n               * Called when the component is mounted.\r\n               * Collect main elements and store them as member properties.\r\n               */\n              mount: function mount() {\n                var _this = this;\n\n                this.init();\n                Splide.on('refresh', function () {\n                  _this.destroy();\n\n                  _this.init();\n                }).on('updated', function () {\n                  removeClass(root, getClasses());\n                  addClass(root, getClasses());\n                });\n              },\n\n              /**\r\n               * Destroy.\r\n               */\n              destroy: function destroy() {\n                Slides.forEach(function (Slide) {\n                  Slide.destroy();\n                });\n                Slides = [];\n                removeClass(root, getClasses());\n              },\n\n              /**\r\n               * Initialization.\r\n               */\n              init: function init() {\n                var _this2 = this;\n\n                collect();\n                addClass(root, getClasses());\n                this.slides.forEach(function (slide, index) {\n                  _this2.register(slide, index, -1);\n                });\n              },\n\n              /**\r\n               * Register a slide to create a Slide object and handle its behavior.\r\n               *\r\n               * @param {Element} slide     - A slide element.\r\n               * @param {number}  index     - A unique index. This can be negative.\r\n               * @param {number}  realIndex - A real index for clones. Set -1 for real slides.\r\n               */\n              register: function register(slide, index, realIndex) {\n                var SlideObject = elements_slide(Splide, index, realIndex, slide);\n                SlideObject.mount();\n                Slides.push(SlideObject);\n              },\n\n              /**\r\n               * Return the Slide object designated by the index.\r\n               * Note that \"find\" is not supported by IE.\r\n               *\r\n               * @return {Object|undefined} - A Slide object if available. Undefined if not.\r\n               */\n              getSlide: function getSlide(index) {\n                return Slides.filter(function (Slide) {\n                  return Slide.index === index;\n                })[0];\n              },\n\n              /**\r\n               * Return all Slide objects.\r\n               *\r\n               * @param {boolean} includeClones - Whether to include cloned slides or not.\r\n               *\r\n               * @return {Object[]} - Slide objects.\r\n               */\n              getSlides: function getSlides(includeClones) {\n                return includeClones ? Slides : Slides.filter(function (Slide) {\n                  return !Slide.isClone;\n                });\n              },\n\n              /**\r\n               * Return Slide objects belonging to the given page.\r\n               *\r\n               * @param {number} page - A page number.\r\n               *\r\n               * @return {Object[]} - An array containing Slide objects.\r\n               */\n              getSlidesByPage: function getSlidesByPage(page) {\n                var idx = Components.Controller.toIndex(page);\n                var options = Splide.options;\n                var max = options.focus !== false ? 1 : options.perPage;\n                return Slides.filter(function (_ref) {\n                  var index = _ref.index;\n                  return idx <= index && index < idx + max;\n                });\n              },\n\n              /**\r\n               * Insert a slide to a slider.\r\n               * Need to refresh Splide after adding a slide.\r\n               *\r\n               * @param {Node|string} slide    - A slide element to be added.\r\n               * @param {number}      index    - A slide will be added at the position.\r\n               * @param {Function}    callback - Called right after the slide is added to the DOM tree.\r\n               */\n              add: function add(slide, index, callback) {\n                if (typeof slide === 'string') {\n                  slide = domify(slide);\n                }\n\n                if (slide instanceof Element) {\n                  var ref = this.slides[index]; // This will be removed in mount() of a Slide component.\n\n                  applyStyle(slide, {\n                    display: 'none'\n                  });\n\n                  if (ref) {\n                    before(slide, ref);\n                    this.slides.splice(index, 0, slide);\n                  } else {\n                    append(this.list, slide);\n                    this.slides.push(slide);\n                  }\n\n                  loaded(slide, function () {\n                    callback && callback(slide);\n                  });\n                }\n              },\n\n              /**\r\n               * Remove a slide from a slider.\r\n               * Need to refresh Splide after removing a slide.\r\n               *\r\n               * @param index - Slide index.\r\n               */\n              remove: function remove(index) {\n                dom_remove(this.slides.splice(index, 1)[0]);\n              },\n\n              /**\r\n               * Trigger the provided callback for each Slide object.\r\n               *\r\n               * @param {Function} callback - A callback function. The first argument will be the Slide object.\r\n               */\n              each: function each(callback) {\n                Slides.forEach(callback);\n              },\n\n              /**\r\n               * Return slides length without clones.\r\n               *\r\n               * @return {number} - Slide length.\r\n               */\n              get length() {\n                return this.slides.length;\n              },\n\n              /**\r\n               * Return \"SlideObjects\" length including clones.\r\n               *\r\n               * @return {number} - Slide length including clones.\r\n               */\n              get total() {\n                return Slides.length;\n              }\n\n            };\n            /**\r\n             * Collect elements.\r\n             */\n\n            function collect() {\n              Elements.slider = child(root, classes.slider);\n              Elements.track = find(root, \".\" + classes.track);\n              Elements.list = child(Elements.track, classes.list);\n              exist(Elements.track && Elements.list, 'Track or list was not found.');\n              Elements.slides = children(Elements.list, classes.slide);\n              var arrows = findParts(classes.arrows);\n              Elements.arrows = {\n                prev: find(arrows, \".\" + classes.prev),\n                next: find(arrows, \".\" + classes.next)\n              };\n              var autoplay = findParts(classes.autoplay);\n              Elements.bar = find(findParts(classes.progress), \".\" + classes.bar);\n              Elements.play = find(autoplay, \".\" + classes.play);\n              Elements.pause = find(autoplay, \".\" + classes.pause);\n              Elements.track.id = Elements.track.id || root.id + \"-track\";\n              Elements.list.id = Elements.list.id || root.id + \"-list\";\n            }\n            /**\r\n             * Return class names for the root element.\r\n             */\n\n\n            function getClasses() {\n              var rootClass = classes.root;\n              var options = Splide.options;\n              return [rootClass + \"--\" + options.type, rootClass + \"--\" + options.direction, options.drag ? rootClass + \"--draggable\" : '', options.isNavigation ? rootClass + \"--nav\" : '', STATUS_CLASSES.active];\n            }\n            /**\r\n             * Find parts only from children of the root or track.\r\n             *\r\n             * @return {Element} - A found element or undefined.\r\n             */\n\n\n            function findParts(className) {\n              return child(root, className) || child(Elements.slider, className);\n            }\n\n            return Elements;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/controller/index.js\n\n          /**\r\n           * The component for controlling the track.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          var floor = Math.floor;\n          /**\r\n           * The component for controlling the track.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var controller = function controller(Splide, Components) {\n            /**\r\n             * Store current options.\r\n             *\r\n             * @type {Object}\r\n             */\n            var options;\n            /**\r\n             * True if the slide is LOOP mode.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isLoop;\n            /**\r\n             * Controller component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Controller = {\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                options = Splide.options;\n                isLoop = Splide.is(LOOP);\n                bind();\n              },\n\n              /**\r\n               * Make track run by the given control.\r\n               * - \"+{i}\" : Increment the slide index by i.\r\n               * - \"-{i}\" : Decrement the slide index by i.\r\n               * - \"{i}\"  : Go to the slide whose index is i.\r\n               * - \">\"    : Go to next page.\r\n               * - \"<\"    : Go to prev page.\r\n               * - \">{i}\" : Go to page i.\r\n               *\r\n               * @param {string|number} control  - A control pattern.\r\n               * @param {boolean}       silently - Go to the destination without event emission.\r\n               */\n              go: function go(control, silently) {\n                var destIndex = this.trim(this.parse(control));\n                Components.Track.go(destIndex, this.rewind(destIndex), silently);\n              },\n\n              /**\r\n               * Parse the given control and return the destination index for the track.\r\n               *\r\n               * @param {string} control - A control target pattern.\r\n               *\r\n               * @return {number} - A parsed target.\r\n               */\n              parse: function parse(control) {\n                var index = Splide.index;\n                var matches = String(control).match(/([+\\-<>]+)(\\d+)?/);\n                var indicator = matches ? matches[1] : '';\n                var number = matches ? parseInt(matches[2]) : 0;\n\n                switch (indicator) {\n                  case '+':\n                    index += number || 1;\n                    break;\n\n                  case '-':\n                    index -= number || 1;\n                    break;\n\n                  case '>':\n                  case '<':\n                    index = parsePage(number, index, indicator === '<');\n                    break;\n\n                  default:\n                    index = parseInt(control);\n                }\n\n                return index;\n              },\n\n              /**\r\n               * Compute index from the given page number.\r\n               *\r\n               * @param {number} page - Page number.\r\n               *\r\n               * @return {number} - A computed page number.\r\n               */\n              toIndex: function toIndex(page) {\n                if (hasFocus()) {\n                  return page;\n                }\n\n                var length = Splide.length;\n                var perPage = options.perPage;\n                var index = page * perPage;\n                index = index - (this.pageLength * perPage - length) * floor(index / length); // Adjustment for the last page.\n\n                if (length - perPage <= index && index < length) {\n                  index = length - perPage;\n                }\n\n                return index;\n              },\n\n              /**\r\n               * Compute page number from the given slide index.\r\n               *\r\n               * @param {number} index - Slide index.\r\n               *\r\n               * @return {number} - A computed page number.\r\n               */\n              toPage: function toPage(index) {\n                if (hasFocus()) {\n                  return index;\n                }\n\n                var length = Splide.length;\n                var perPage = options.perPage; // Make the last \"perPage\" number of slides belong to the last page.\n\n                if (length - perPage <= index && index < length) {\n                  return floor((length - 1) / perPage);\n                }\n\n                return floor(index / perPage);\n              },\n\n              /**\r\n               * Trim the given index according to the current mode.\r\n               * Index being returned could be less than 0 or greater than the length in Loop mode.\r\n               *\r\n               * @param {number} index - An index being trimmed.\r\n               *\r\n               * @return {number} - A trimmed index.\r\n               */\n              trim: function trim(index) {\n                if (!isLoop) {\n                  index = options.rewind ? this.rewind(index) : between(index, 0, this.edgeIndex);\n                }\n\n                return index;\n              },\n\n              /**\r\n               * Rewind the given index if it's out of range.\r\n               *\r\n               * @param {number} index - An index.\r\n               *\r\n               * @return {number} - A rewound index.\r\n               */\n              rewind: function rewind(index) {\n                var edge = this.edgeIndex;\n\n                if (isLoop) {\n                  while (index > edge) {\n                    index -= edge + 1;\n                  }\n\n                  while (index < 0) {\n                    index += edge + 1;\n                  }\n                } else {\n                  if (index > edge) {\n                    index = 0;\n                  } else if (index < 0) {\n                    index = edge;\n                  }\n                }\n\n                return index;\n              },\n\n              /**\r\n               * Check if the direction is \"rtl\" or not.\r\n               *\r\n               * @return {boolean} - True if \"rtl\" or false if not.\r\n               */\n              isRtl: function isRtl() {\n                return options.direction === RTL;\n              },\n\n              /**\r\n               * Return the page length.\r\n               *\r\n               * @return {number} - Max page number.\r\n               */\n              get pageLength() {\n                var length = Splide.length;\n                return hasFocus() ? length : Math.ceil(length / options.perPage);\n              },\n\n              /**\r\n               * Return the edge index.\r\n               *\r\n               * @return {number} - Edge index.\r\n               */\n              get edgeIndex() {\n                var length = Splide.length;\n\n                if (!length) {\n                  return 0;\n                }\n\n                if (hasFocus() || options.isNavigation || isLoop) {\n                  return length - 1;\n                }\n\n                return length - options.perPage;\n              },\n\n              /**\r\n               * Return the index of the previous slide.\r\n               *\r\n               * @return {number} - The index of the previous slide if available. -1 otherwise.\r\n               */\n              get prevIndex() {\n                var prev = Splide.index - 1;\n\n                if (isLoop || options.rewind) {\n                  prev = this.rewind(prev);\n                }\n\n                return prev > -1 ? prev : -1;\n              },\n\n              /**\r\n               * Return the index of the next slide.\r\n               *\r\n               * @return {number} - The index of the next slide if available. -1 otherwise.\r\n               */\n              get nextIndex() {\n                var next = Splide.index + 1;\n\n                if (isLoop || options.rewind) {\n                  next = this.rewind(next);\n                }\n\n                return Splide.index < next && next <= this.edgeIndex || next === 0 ? next : -1;\n              }\n\n            };\n            /**\r\n             * Listen to some events.\r\n             */\n\n            function bind() {\n              Splide.on('move', function (newIndex) {\n                Splide.index = newIndex;\n              }).on('updated refresh', function (newOptions) {\n                options = newOptions || options;\n                Splide.index = between(Splide.index, 0, Controller.edgeIndex);\n              });\n            }\n            /**\r\n             * Verify if the focus option is available or not.\r\n             *\r\n             * @return {boolean} - True if a slider has the focus option.\r\n             */\n\n\n            function hasFocus() {\n              return options.focus !== false;\n            }\n            /**\r\n             * Return the next or previous page index computed by the page number and current index.\r\n             *\r\n             * @param {number}  number - Specify the page number.\r\n             * @param {number}  index  - Current index.\r\n             * @param {boolean} prev   - Prev or next.\r\n             *\r\n             * @return {number} - Slide index.\r\n             */\n\n\n            function parsePage(number, index, prev) {\n              if (number > -1) {\n                return Controller.toIndex(number);\n              }\n\n              var perMove = options.perMove;\n              var sign = prev ? -1 : 1;\n\n              if (perMove) {\n                return index + perMove * sign;\n              }\n\n              return Controller.toIndex(Controller.toPage(index) + sign);\n            }\n\n            return Controller;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/track/index.js\n\n          /**\r\n           * The component for moving list in the track.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          var abs = Math.abs;\n          /**\r\n           * The component for moving list in the track.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var track = function track(Splide, Components) {\n            /**\r\n             * Hold the Layout component.\r\n             *\r\n             * @type {Object}\r\n             */\n            var Layout;\n            /**\r\n             * Hold the Layout component.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Elements;\n            /**\r\n             * Store the list element.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var list;\n            /**\r\n             * Whether the current direction is vertical or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isVertical = Splide.options.direction === TTB;\n            /**\r\n             * Whether the slider type is FADE or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isFade = Splide.is(FADE);\n            /**\r\n             * Whether the slider direction is RTL or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isRTL = Splide.options.direction === RTL;\n            /**\r\n             * This will be true while transitioning from the last index to the first one.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isLoopPending = false;\n            /**\r\n             * Sign for the direction. Only RTL mode uses the positive sign.\r\n             *\r\n             * @type {number}\r\n             */\n\n            var sign = isRTL ? 1 : -1;\n            /**\r\n             * Track component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Track = {\n              /**\r\n               * Make public the sign defined locally.\r\n               *\r\n               * @type {number}\r\n               */\n              sign: sign,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                Elements = Components.Elements;\n                Layout = Components.Layout;\n                list = Elements.list;\n              },\n\n              /**\r\n               * Called after the component is mounted.\r\n               * The resize event must be registered after the Layout's one is done.\r\n               */\n              mounted: function mounted() {\n                var _this = this;\n\n                if (!isFade) {\n                  this.jump(0);\n                  Splide.on('mounted resize updated', function () {\n                    _this.jump(Splide.index);\n                  });\n                }\n              },\n\n              /**\r\n               * Go to the given destination index.\r\n               * After arriving there, the track is jump to the new index without animation, mainly for loop mode.\r\n               *\r\n               * @param {number}  destIndex - A destination index.\r\n               *                              This can be negative or greater than slides length for reaching clones.\r\n               * @param {number}  newIndex  - An actual new index. They are always same in Slide and Rewind mode.\r\n               * @param {boolean} silently  - If true, suppress emitting events.\r\n               */\n              go: function go(destIndex, newIndex, silently) {\n                var newPosition = getTrimmedPosition(destIndex);\n                var prevIndex = Splide.index; // Prevent any actions while transitioning from the last index to the first one for jump.\n\n                if (Splide.State.is(_MOVING) && isLoopPending) {\n                  return;\n                }\n\n                isLoopPending = destIndex !== newIndex;\n\n                if (!silently) {\n                  Splide.emit('move', newIndex, prevIndex, destIndex);\n                }\n\n                if (Math.abs(newPosition - this.position) >= 1 || isFade) {\n                  Components.Transition.start(destIndex, newIndex, prevIndex, this.toCoord(newPosition), function () {\n                    onTransitionEnd(destIndex, newIndex, prevIndex, silently);\n                  });\n                } else {\n                  if (destIndex !== prevIndex && Splide.options.trimSpace === 'move') {\n                    Components.Controller.go(destIndex + destIndex - prevIndex, silently);\n                  } else {\n                    onTransitionEnd(destIndex, newIndex, prevIndex, silently);\n                  }\n                }\n              },\n\n              /**\r\n               * Move the track to the specified index.\r\n               *\r\n               * @param {number} index - A destination index where the track jumps.\r\n               */\n              jump: function jump(index) {\n                this.translate(getTrimmedPosition(index));\n              },\n\n              /**\r\n               * Set the list position by CSS translate property.\r\n               *\r\n               * @param {number} position - A new position value.\r\n               */\n              translate: function translate(position) {\n                applyStyle(list, {\n                  transform: \"translate\" + (isVertical ? 'Y' : 'X') + \"(\" + position + \"px)\"\n                });\n              },\n\n              /**\r\n               * Cancel the transition and set the list position.\r\n               * Also, loop the slider if necessary.\r\n               */\n              cancel: function cancel() {\n                if (Splide.is(LOOP)) {\n                  this.shift();\n                } else {\n                  // Ensure the current position.\n                  this.translate(this.position);\n                }\n\n                applyStyle(list, {\n                  transition: ''\n                });\n              },\n\n              /**\r\n               * Shift the slider if it exceeds borders on the edge.\r\n               */\n              shift: function shift() {\n                var position = abs(this.position);\n                var left = abs(this.toPosition(0));\n                var right = abs(this.toPosition(Splide.length));\n                var innerSize = right - left;\n\n                if (position < left) {\n                  position += innerSize;\n                } else if (position > right) {\n                  position -= innerSize;\n                }\n\n                this.translate(sign * position);\n              },\n\n              /**\r\n               * Trim redundant spaces on the left or right edge if necessary.\r\n               *\r\n               * @param {number} position - Position value to be trimmed.\r\n               *\r\n               * @return {number} - Trimmed position.\r\n               */\n              trim: function trim(position) {\n                if (!Splide.options.trimSpace || Splide.is(LOOP)) {\n                  return position;\n                }\n\n                var edge = sign * (Layout.totalSize() - Layout.size - Layout.gap);\n                return between(position, edge, 0);\n              },\n\n              /**\r\n               * Calculate the closest slide index from the given position.\r\n               *\r\n               * @param {number} position - A position converted to an slide index.\r\n               *\r\n               * @return {number} - The closest slide index.\r\n               */\n              toIndex: function toIndex(position) {\n                var _this2 = this;\n\n                var index = 0;\n                var minDistance = Infinity;\n                Elements.getSlides(true).forEach(function (Slide) {\n                  var slideIndex = Slide.index;\n                  var distance = abs(_this2.toPosition(slideIndex) - position);\n\n                  if (distance < minDistance) {\n                    minDistance = distance;\n                    index = slideIndex;\n                  }\n                });\n                return index;\n              },\n\n              /**\r\n               * Return coordinates object by the given position.\r\n               *\r\n               * @param {number} position - A position value.\r\n               *\r\n               * @return {Object} - A coordinates object.\r\n               */\n              toCoord: function toCoord(position) {\n                return {\n                  x: isVertical ? 0 : position,\n                  y: isVertical ? position : 0\n                };\n              },\n\n              /**\r\n               * Calculate the track position by a slide index.\r\n               *\r\n               * @param {number} index - Slide index.\r\n               *\r\n               * @return {Object} - Calculated position.\r\n               */\n              toPosition: function toPosition(index) {\n                var position = Layout.totalSize(index) - Layout.slideSize(index) - Layout.gap;\n                return sign * (position + this.offset(index));\n              },\n\n              /**\r\n               * Return the current offset value, considering direction.\r\n               *\r\n               * @return {number} - Offset amount.\r\n               */\n              offset: function offset(index) {\n                var focus = Splide.options.focus;\n                var slideSize = Layout.slideSize(index);\n\n                if (focus === 'center') {\n                  return -(Layout.size - slideSize) / 2;\n                }\n\n                return -(parseInt(focus) || 0) * (slideSize + Layout.gap);\n              },\n\n              /**\r\n               * Return the current position.\r\n               * This returns the correct position even while transitioning by CSS.\r\n               *\r\n               * @return {number} - Current position.\r\n               */\n              get position() {\n                var prop = isVertical ? 'top' : isRTL ? 'right' : 'left';\n                return getRect(list)[prop] - (getRect(Elements.track)[prop] - Layout.padding[prop] * sign);\n              }\n\n            };\n            /**\r\n             * Called whenever slides arrive at a destination.\r\n             *\r\n             * @param {number}  destIndex - A destination index.\r\n             * @param {number}  newIndex  - A new index.\r\n             * @param {number}  prevIndex - A previous index.\r\n             * @param {boolean} silently  - If true, suppress emitting events.\r\n             */\n\n            function onTransitionEnd(destIndex, newIndex, prevIndex, silently) {\n              applyStyle(list, {\n                transition: ''\n              });\n              isLoopPending = false;\n\n              if (!isFade) {\n                Track.jump(newIndex);\n              }\n\n              if (!silently) {\n                Splide.emit('moved', newIndex, prevIndex, destIndex);\n              }\n            }\n            /**\r\n             * Convert index to the trimmed position.\r\n             *\r\n             * @return {number} - Trimmed position.\r\n             */\n\n\n            function getTrimmedPosition(index) {\n              return Track.trim(Track.toPosition(index));\n            }\n\n            return Track;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/clones/index.js\n\n          /**\r\n           * The component for cloning some slides for \"loop\" mode of the track.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for cloning some slides for \"loop\" mode of the track.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var clones = function clones(Splide, Components) {\n            /**\r\n             * Store information of all clones.\r\n             *\r\n             * @type {Array}\r\n             */\n            var clones = [];\n            /**\r\n             * Store the current clone count on one side.\r\n             *\r\n             * @type {number}\r\n             */\n\n            var cloneCount = 0;\n            /**\r\n             * Keep Elements component.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Elements = Components.Elements;\n            /**\r\n             * Clones component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Clones = {\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                var _this = this;\n\n                if (Splide.is(LOOP)) {\n                  init();\n                  Splide.on('refresh:before', function () {\n                    _this.destroy();\n                  }).on('refresh', init).on('resize', function () {\n                    if (cloneCount !== getCloneCount()) {\n                      // Destroy before refresh not to collect clones by the Elements component.\n                      _this.destroy();\n\n                      Splide.refresh();\n                    }\n                  });\n                }\n              },\n\n              /**\r\n               * Destroy.\r\n               */\n              destroy: function destroy() {\n                dom_remove(clones);\n                clones = [];\n              },\n\n              /**\r\n               * Return all clones.\r\n               *\r\n               * @return {Element[]} - Cloned elements.\r\n               */\n              get clones() {\n                return clones;\n              },\n\n              /**\r\n               * Return clone length.\r\n               *\r\n               * @return {number} - A length of clones.\r\n               */\n              get length() {\n                return clones.length;\n              }\n\n            };\n            /**\r\n             * Initialization.\r\n             */\n\n            function init() {\n              Clones.destroy();\n              cloneCount = getCloneCount();\n              generateClones(cloneCount);\n            }\n            /**\r\n             * Generate and append/prepend clones.\r\n             *\r\n             * @param {number} count - The half number of clones.\r\n             */\n\n\n            function generateClones(count) {\n              var length = Elements.length,\n                  register = Elements.register;\n\n              if (length) {\n                var slides = Elements.slides;\n\n                while (slides.length < count) {\n                  slides = slides.concat(slides);\n                } // Clones after the last element.\n\n\n                slides.slice(0, count).forEach(function (elm, index) {\n                  var clone = cloneDeeply(elm);\n                  append(Elements.list, clone);\n                  clones.push(clone);\n                  register(clone, index + length, index % length);\n                }); // Clones before the first element.\n\n                slides.slice(-count).forEach(function (elm, index) {\n                  var clone = cloneDeeply(elm);\n                  before(clone, slides[0]);\n                  clones.push(clone);\n                  register(clone, index - count, (length + index - count % length) % length);\n                });\n              }\n            }\n            /**\r\n             * Return half count of clones to be generated.\r\n             * Clone count is determined by:\r\n             * - \"clones\" value in the options.\r\n             * - Number of slides that can be placed in a view in \"fixed\" mode.\r\n             * - Max pages a flick action can move.\r\n             * - Whether the slide length is enough for perPage.\r\n             *\r\n             * @return {number} - Count for clones.\r\n             */\n\n\n            function getCloneCount() {\n              var options = Splide.options;\n\n              if (options.clones) {\n                return options.clones;\n              } // Use the slide length in autoWidth mode because the number cannot be calculated.\n\n\n              var baseCount = options.autoWidth || options.autoHeight ? Elements.length : options.perPage;\n              var dimension = options.direction === TTB ? 'Height' : 'Width';\n              var fixedSize = toPixel(Splide.root, options[\"fixed\" + dimension]);\n\n              if (fixedSize) {\n                // Roughly calculate the count. This needs not to be strict.\n                baseCount = Math.ceil(Elements.track[\"client\" + dimension] / fixedSize);\n              }\n\n              return baseCount * (options.drag ? options.flickMaxPages + 1 : 1);\n            }\n            /**\r\n             * Clone deeply the given element.\r\n             *\r\n             * @param {Element} elm - An element being duplicated.\r\n             *\r\n             * @return {Node} - A cloned node(element).\r\n             */\n\n\n            function cloneDeeply(elm) {\n              var clone = elm.cloneNode(true);\n              addClass(clone, Splide.classes.clone); // ID should not be duplicated.\n\n              removeAttribute(clone, 'id');\n              return clone;\n            }\n\n            return Clones;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/layout/directions/horizontal.js\n\n          /**\r\n           * The resolver component for horizontal layout.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The resolver component for horizontal layout.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The resolver object.\r\n           */\n\n          /* harmony default export */\n\n          var horizontal = function horizontal(Splide, Components) {\n            /**\r\n             * Keep the Elements component.\r\n             *\r\n             * @type {string}\r\n             */\n            var Elements = Components.Elements;\n            /**\r\n             * Keep the root element.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var root = Splide.root;\n            /**\r\n             * Keep the track element.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var track;\n            /**\r\n             * Keep the latest options.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var options = Splide.options;\n            return {\n              /**\r\n               * Margin property name.\r\n               *\r\n               * @type {string}\r\n               */\n              margin: 'margin' + (options.direction === RTL ? 'Left' : 'Right'),\n\n              /**\r\n               * Always 0 because the height will be determined by inner contents.\r\n               *\r\n               * @type {number}\r\n               */\n              height: 0,\n\n              /**\r\n               * Initialization.\r\n               */\n              init: function init() {\n                this.resize();\n              },\n\n              /**\r\n               * Resize gap and padding.\r\n               * This must be called on init.\r\n               */\n              resize: function resize() {\n                options = Splide.options;\n                track = Elements.track;\n                this.gap = toPixel(root, options.gap);\n                var padding = options.padding;\n                var left = toPixel(root, padding.left || padding);\n                var right = toPixel(root, padding.right || padding);\n                this.padding = {\n                  left: left,\n                  right: right\n                };\n                applyStyle(track, {\n                  paddingLeft: unit(left),\n                  paddingRight: unit(right)\n                });\n              },\n\n              /**\r\n               * Return total width from the left of the list to the right of the slide specified by the provided index.\r\n               *\r\n               * @param {number} index - Optional. A slide index. If undefined, total width of the slider will be returned.\r\n               *\r\n               * @return {number} - Total width to the right side of the specified slide, or 0 for an invalid index.\r\n               */\n              totalWidth: function totalWidth(index) {\n                if (index === void 0) {\n                  index = Splide.length - 1;\n                }\n\n                var Slide = Elements.getSlide(index);\n                var width = 0;\n\n                if (Slide) {\n                  var slideRect = getRect(Slide.slide);\n                  var listRect = getRect(Elements.list);\n\n                  if (options.direction === RTL) {\n                    width = listRect.right - slideRect.left;\n                  } else {\n                    width = slideRect.right - listRect.left;\n                  }\n\n                  width += this.gap;\n                }\n\n                return width;\n              },\n\n              /**\r\n               * Return the slide width in px.\r\n               *\r\n               * @param {number} index - Slide index.\r\n               *\r\n               * @return {number} - The slide width.\r\n               */\n              slideWidth: function slideWidth(index) {\n                if (options.autoWidth) {\n                  var Slide = Elements.getSlide(index);\n                  return Slide ? Slide.slide.offsetWidth : 0;\n                }\n\n                var width = options.fixedWidth || (this.width + this.gap) / options.perPage - this.gap;\n                return toPixel(root, width);\n              },\n\n              /**\r\n               * Return the slide height in px.\r\n               *\r\n               * @return {number} - The slide height.\r\n               */\n              slideHeight: function slideHeight() {\n                var height = options.height || options.fixedHeight || this.width * options.heightRatio;\n                return toPixel(root, height);\n              },\n\n              /**\r\n               * Return slider width without padding.\r\n               *\r\n               * @return {number} - Current slider width.\r\n               */\n              get width() {\n                return track.clientWidth - this.padding.left - this.padding.right;\n              }\n\n            };\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/layout/directions/vertical.js\n\n          /**\r\n           * The resolver component for vertical layout.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The resolver component for vertical layout.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The resolver object.\r\n           */\n\n          /* harmony default export */\n\n          var vertical = function vertical(Splide, Components) {\n            /**\r\n             * Keep the Elements component.\r\n             *\r\n             * @type {string}\r\n             */\n            var Elements = Components.Elements;\n            /**\r\n             * Keep the root element.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var root = Splide.root;\n            /**\r\n             * Keep the track element.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var track;\n            /**\r\n             * Keep the latest options.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var options;\n            return {\n              /**\r\n               * Margin property name.\r\n               *\r\n               * @type {string}\r\n               */\n              margin: 'marginBottom',\n\n              /**\r\n               * Initialization.\r\n               */\n              init: function init() {\n                this.resize();\n              },\n\n              /**\r\n               * Resize gap and padding.\r\n               * This must be called on init.\r\n               */\n              resize: function resize() {\n                options = Splide.options;\n                track = Elements.track;\n                this.gap = toPixel(root, options.gap);\n                var padding = options.padding;\n                var top = toPixel(root, padding.top || padding);\n                var bottom = toPixel(root, padding.bottom || padding);\n                this.padding = {\n                  top: top,\n                  bottom: bottom\n                };\n                applyStyle(track, {\n                  paddingTop: unit(top),\n                  paddingBottom: unit(bottom)\n                });\n              },\n\n              /**\r\n               * Return total height from the top of the list to the bottom of the slide specified by the provided index.\r\n               *\r\n               * @param {number} index - Optional. A slide index. If undefined, total height of the slider will be returned.\r\n               *\r\n               * @return {number} - Total height to the bottom of the specified slide, or 0 for an invalid index.\r\n               */\n              totalHeight: function totalHeight(index) {\n                if (index === void 0) {\n                  index = Splide.length - 1;\n                }\n\n                var Slide = Elements.getSlide(index);\n\n                if (Slide) {\n                  return getRect(Slide.slide).bottom - getRect(Elements.list).top + this.gap;\n                }\n\n                return 0;\n              },\n\n              /**\r\n               * Return the slide width in px.\r\n               *\r\n               * @return {number} - The slide width.\r\n               */\n              slideWidth: function slideWidth() {\n                return toPixel(root, options.fixedWidth || this.width);\n              },\n\n              /**\r\n               * Return the slide height in px.\r\n               *\r\n               * @param {number} index - Slide index.\r\n               *\r\n               * @return {number} - The slide height.\r\n               */\n              slideHeight: function slideHeight(index) {\n                if (options.autoHeight) {\n                  var Slide = Elements.getSlide(index);\n                  return Slide ? Slide.slide.offsetHeight : 0;\n                }\n\n                var height = options.fixedHeight || (this.height + this.gap) / options.perPage - this.gap;\n                return toPixel(root, height);\n              },\n\n              /**\r\n               * Return slider width without padding.\r\n               *\r\n               * @return {number} - Current slider width.\r\n               */\n              get width() {\n                return track.clientWidth;\n              },\n\n              /**\r\n               * Return slide height without padding.\r\n               *\r\n               * @return {number} - Slider height.\r\n               */\n              get height() {\n                var height = options.height || this.width * options.heightRatio;\n                exist(height, '\"height\" or \"heightRatio\" is missing.');\n                return toPixel(root, height) - this.padding.top - this.padding.bottom;\n              }\n\n            };\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/utils/time.js\n\n          /**\r\n           * A package of utility functions related with time.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Simple throttle function that controls how often the given function is executed.\r\n           *\r\n           * @param {function} func - A function to be throttled.\r\n           * @param {number}   wait - Time in millisecond for interval of execution.\r\n           *\r\n           * @return {Function} - A debounced function.\r\n           */\n\n          function throttle(func, wait) {\n            var timeout; // Declare function by the \"function\" keyword to prevent \"this\" from being inherited.\n\n            return function () {\n              if (!timeout) {\n                timeout = setTimeout(function () {\n                  func();\n                  timeout = null;\n                }, wait);\n              }\n            };\n          }\n          /**\r\n           * Custom setInterval function that provides progress rate as callback.\r\n           *\r\n           * @param {function} callback - A callback function fired every time the interval time passes.\r\n           * @param {number}   interval - Interval duration in milliseconds.\r\n           * @param {function} progress - A callback function fired whenever the progress goes.\r\n           *\r\n           * @return {Object} - An object containing play() and pause() functions.\r\n           */\n\n\n          function createInterval(callback, interval, progress) {\n            var _window = window,\n                requestAnimationFrame = _window.requestAnimationFrame;\n            var start,\n                elapse,\n                rate,\n                _pause = true;\n\n            var step = function step(timestamp) {\n              if (!_pause) {\n                if (!start) {\n                  start = timestamp;\n\n                  if (rate && rate < 1) {\n                    start -= rate * interval;\n                  }\n                }\n\n                elapse = timestamp - start;\n                rate = elapse / interval;\n\n                if (elapse >= interval) {\n                  start = 0;\n                  rate = 1;\n                  callback();\n                }\n\n                if (progress) {\n                  progress(rate);\n                }\n\n                requestAnimationFrame(step);\n              }\n            };\n\n            return {\n              pause: function pause() {\n                _pause = true;\n                start = 0;\n              },\n              play: function play(reset) {\n                start = 0;\n\n                if (reset) {\n                  rate = 0;\n                }\n\n                if (_pause) {\n                  _pause = false;\n                  requestAnimationFrame(step);\n                }\n              }\n            };\n          }\n\n          ; // CONCATENATED MODULE: ./src/js/components/layout/index.js\n\n          /**\r\n           * The component for handing slide layouts and their sizes.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for handing slide layouts and their sizes.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var layout = function layout(Splide, Components) {\n            /**\r\n             * Keep the Elements component.\r\n             *\r\n             * @type {string}\r\n             */\n            var Elements = Components.Elements;\n            /**\r\n             * Whether the slider is vertical or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isVertical = Splide.options.direction === TTB;\n            /**\r\n             * Layout component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Layout = object_assign({\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                bind();\n                init(); // The word \"size\" means width for a horizontal slider and height for a vertical slider.\n\n                this.totalSize = isVertical ? this.totalHeight : this.totalWidth;\n                this.slideSize = isVertical ? this.slideHeight : this.slideWidth;\n              },\n\n              /**\r\n               * Destroy the component.\r\n               */\n              destroy: function destroy() {\n                removeAttribute([Elements.list, Elements.track], 'style');\n              },\n\n              /**\r\n               * Return the slider height on the vertical mode or width on the horizontal mode.\r\n               *\r\n               * @return {number}\r\n               */\n              get size() {\n                return isVertical ? this.height : this.width;\n              }\n\n            }, isVertical ? vertical(Splide, Components) : horizontal(Splide, Components));\n            /**\r\n             * Init slider styles according to options.\r\n             */\n\n            function init() {\n              Layout.init();\n              applyStyle(Splide.root, {\n                maxWidth: unit(Splide.options.width)\n              });\n              Elements.each(function (Slide) {\n                Slide.slide.style[Layout.margin] = unit(Layout.gap);\n              });\n              resize();\n            }\n            /**\r\n             * Listen the resize native event with throttle.\r\n             * Initialize when the component is mounted or options are updated.\r\n             */\n\n\n            function bind() {\n              Splide.on('resize load', throttle(function () {\n                Splide.emit('resize');\n              }, Splide.options.throttle), window).on('resize', resize).on('updated refresh', init);\n            }\n            /**\r\n             * Resize the track and slide elements.\r\n             */\n\n\n            function resize() {\n              var options = Splide.options;\n              Layout.resize();\n              applyStyle(Elements.track, {\n                height: unit(Layout.height)\n              });\n              var slideHeight = options.autoHeight ? null : unit(Layout.slideHeight());\n              Elements.each(function (Slide) {\n                applyStyle(Slide.container, {\n                  height: slideHeight\n                });\n                applyStyle(Slide.slide, {\n                  width: options.autoWidth ? null : unit(Layout.slideWidth(Slide.index)),\n                  height: Slide.container ? null : slideHeight\n                });\n              });\n              Splide.emit('resized');\n            }\n\n            return Layout;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/drag/index.js\n\n          /**\r\n           * The component for supporting mouse drag and swipe.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          var drag_abs = Math.abs;\n          /**\r\n           * If the absolute velocity is greater thant this value,\r\n           * a slider always goes to a different slide after drag, not allowed to stay on a current slide.\r\n           */\n\n          var MIN_VELOCITY = 0.1;\n          /**\r\n           * Adjust how much the track can be pulled on the first or last page.\r\n           * The larger number this is, the farther the track moves.\r\n           * This should be around 5 - 9.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var FRICTION_REDUCER = 7;\n          /**\r\n           * The component supporting mouse drag and swipe.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var drag = function drag(Splide, Components) {\n            /**\r\n             * Store the Move component.\r\n             *\r\n             * @type {Object}\r\n             */\n            var Track = Components.Track;\n            /**\r\n             * Store the Controller component.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Controller = Components.Controller;\n            /**\r\n             * Coordinate of the track on starting drag.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var startCoord;\n            /**\r\n             * Analyzed info on starting drag.\r\n             *\r\n             * @type {Object|null}\r\n             */\n\n            var startInfo;\n            /**\r\n             * Analyzed info being updated while dragging/swiping.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var currentInfo;\n            /**\r\n             * Determine whether slides are being dragged or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isDragging;\n            /**\r\n             * Whether the slider direction is vertical or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isVertical = Splide.options.direction === TTB;\n            /**\r\n             * Axis for the direction.\r\n             *\r\n             * @type {string}\r\n             */\n\n            var axis = isVertical ? 'y' : 'x';\n            /**\r\n             * Drag component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Drag = {\n              /**\r\n               * Whether dragging is disabled or not.\r\n               *\r\n               * @type {boolean}\r\n               */\n              disabled: false,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                var _this = this;\n\n                var Elements = Components.Elements;\n                var track = Elements.track;\n                Splide.on('touchstart mousedown', start, track).on('touchmove mousemove', move, track, {\n                  passive: false\n                }).on('touchend touchcancel mouseleave mouseup dragend', end, track).on('mounted refresh', function () {\n                  // Prevent dragging an image or anchor itself.\n                  each(Elements.list.querySelectorAll('img, a'), function (elm) {\n                    Splide.off('dragstart', elm).on('dragstart', function (e) {\n                      e.preventDefault();\n                    }, elm, {\n                      passive: false\n                    });\n                  });\n                }).on('mounted updated', function () {\n                  _this.disabled = !Splide.options.drag;\n                });\n              }\n            };\n            /**\r\n             * Called when the track starts to be dragged.\r\n             *\r\n             * @param {TouchEvent|MouseEvent} e - TouchEvent or MouseEvent object.\r\n             */\n\n            function start(e) {\n              if (!Drag.disabled && !isDragging) {\n                // These prams are used to evaluate whether the slider should start moving.\n                init(e);\n              }\n            }\n            /**\r\n             * Initialize parameters.\r\n             *\r\n             * @param {TouchEvent|MouseEvent} e - TouchEvent or MouseEvent object.\r\n             */\n\n\n            function init(e) {\n              startCoord = Track.toCoord(Track.position);\n              startInfo = analyze(e, {});\n              currentInfo = startInfo;\n            }\n            /**\r\n             * Called while the track being dragged.\r\n             *\r\n             * @param {TouchEvent|MouseEvent} e - TouchEvent or MouseEvent object.\r\n             */\n\n\n            function move(e) {\n              if (startInfo) {\n                currentInfo = analyze(e, startInfo);\n\n                if (isDragging) {\n                  if (e.cancelable) {\n                    e.preventDefault();\n                  }\n\n                  if (!Splide.is(FADE)) {\n                    var position = startCoord[axis] + currentInfo.offset[axis];\n                    Track.translate(resist(position));\n                  }\n                } else {\n                  if (shouldMove(currentInfo)) {\n                    Splide.emit('drag', startInfo);\n                    isDragging = true;\n                    Track.cancel(); // These params are actual drag data.\n\n                    init(e);\n                  }\n                }\n              }\n            }\n            /**\r\n             * Determine whether to start moving the track or not by drag angle.\r\n             *\r\n             * @param {Object} info - An information object.\r\n             *\r\n             * @return {boolean} - True if the track should be moved or false if not.\r\n             */\n\n\n            function shouldMove(_ref) {\n              var offset = _ref.offset;\n\n              if (Splide.State.is(_MOVING) && Splide.options.waitForTransition) {\n                return false;\n              }\n\n              var angle = Math.atan(drag_abs(offset.y) / drag_abs(offset.x)) * 180 / Math.PI;\n\n              if (isVertical) {\n                angle = 90 - angle;\n              }\n\n              return angle < Splide.options.dragAngleThreshold;\n            }\n            /**\r\n             * Resist dragging the track on the first/last page because there is no more.\r\n             *\r\n             * @param {number} position - A position being applied to the track.\r\n             *\r\n             * @return {Object} - Adjusted position.\r\n             */\n\n\n            function resist(position) {\n              if (Splide.is(SLIDE)) {\n                var sign = Track.sign;\n\n                var _start = sign * Track.trim(Track.toPosition(0));\n\n                var _end = sign * Track.trim(Track.toPosition(Controller.edgeIndex));\n\n                position *= sign;\n\n                if (position < _start) {\n                  position = _start - FRICTION_REDUCER * Math.log(_start - position);\n                } else if (position > _end) {\n                  position = _end + FRICTION_REDUCER * Math.log(position - _end);\n                }\n\n                position *= sign;\n              }\n\n              return position;\n            }\n            /**\r\n             * Called when dragging ends.\r\n             */\n\n\n            function end() {\n              startInfo = null;\n\n              if (isDragging) {\n                Splide.emit('dragged', currentInfo);\n                go(currentInfo);\n                isDragging = false;\n              }\n            }\n            /**\r\n             * Go to the slide determined by the analyzed data.\r\n             *\r\n             * @param {Object} info - An info object.\r\n             */\n\n\n            function go(info) {\n              var velocity = info.velocity[axis];\n              var absV = drag_abs(velocity);\n\n              if (absV > 0) {\n                var options = Splide.options;\n                var index = Splide.index;\n                var sign = velocity < 0 ? -1 : 1;\n                var destIndex = index;\n\n                if (!Splide.is(FADE)) {\n                  var destination = Track.position;\n\n                  if (absV > options.flickVelocityThreshold && drag_abs(info.offset[axis]) < options.swipeDistanceThreshold) {\n                    destination += sign * Math.min(absV * options.flickPower, Components.Layout.size * (options.flickMaxPages || 1));\n                  }\n\n                  destIndex = Track.toIndex(destination);\n                }\n                /*\r\n                 * Do not allow the track to go to a previous position if there is enough velocity.\r\n                 * Always use the adjacent index for the fade mode.\r\n                 */\n\n\n                if (destIndex === index && absV > MIN_VELOCITY) {\n                  destIndex = index + sign * Track.sign;\n                }\n\n                if (Splide.is(SLIDE)) {\n                  destIndex = between(destIndex, 0, Controller.edgeIndex);\n                }\n\n                Controller.go(destIndex, options.isNavigation);\n              }\n            }\n            /**\r\n             * Analyze the given event object and return important information for handling swipe behavior.\r\n             *\r\n             * @param {Event}   e          - Touch or Mouse event object.\r\n             * @param {Object}  startInfo  - Information analyzed on start for calculating difference from the current one.\r\n             *\r\n             * @return {Object} - An object containing analyzed information, such as offset, velocity, etc.\r\n             */\n\n\n            function analyze(e, startInfo) {\n              var timeStamp = e.timeStamp,\n                  touches = e.touches;\n\n              var _ref2 = touches ? touches[0] : e,\n                  clientX = _ref2.clientX,\n                  clientY = _ref2.clientY;\n\n              var _ref3 = startInfo.to || {},\n                  _ref3$x = _ref3.x,\n                  fromX = _ref3$x === void 0 ? clientX : _ref3$x,\n                  _ref3$y = _ref3.y,\n                  fromY = _ref3$y === void 0 ? clientY : _ref3$y;\n\n              var startTime = startInfo.time || 0;\n              var offset = {\n                x: clientX - fromX,\n                y: clientY - fromY\n              };\n              var duration = timeStamp - startTime;\n              var velocity = {\n                x: offset.x / duration,\n                y: offset.y / duration\n              };\n              return {\n                to: {\n                  x: clientX,\n                  y: clientY\n                },\n                offset: offset,\n                time: timeStamp,\n                velocity: velocity\n              };\n            }\n\n            return Drag;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/click/index.js\n\n          /**\r\n           * The component for handling a click event.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for handling a click event.\r\n           * Click should be disabled during drag/swipe.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var click = function click(Splide, Components) {\n            /**\r\n             * Whether click is disabled or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n            var disabled = false;\n            /**\r\n             * Click component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Click = {\n              /**\r\n               * Mount only when the drag is activated and the slide type is not \"fade\".\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: Splide.options.drag,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                Splide.on('click', onClick, Components.Elements.track, {\n                  capture: true\n                }).on('drag', function () {\n                  disabled = true;\n                }).on('dragged', function () {\n                  // Make sure the flag is released after the click event is fired.\n                  setTimeout(function () {\n                    disabled = false;\n                  });\n                });\n              }\n            };\n            /**\r\n             * Called when a track element is clicked.\r\n             *\r\n             * @param {Event} e - A click event.\r\n             */\n\n            function onClick(e) {\n              if (disabled) {\n                e.preventDefault();\n                e.stopPropagation();\n                e.stopImmediatePropagation();\n              }\n            }\n\n            return Click;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/autoplay/index.js\n\n          /**\r\n           * The component for playing slides automatically.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Set of pause flags.\r\n           */\n\n          var PAUSE_FLAGS = {\n            HOVER: 1,\n            FOCUS: 2,\n            MANUAL: 3\n          };\n          /**\r\n           * The component for playing slides automatically.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           * @param {string} name       - A component name as a lowercase string.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var autoplay = function autoplay(Splide, Components, name) {\n            /**\r\n             * Store pause flags.\r\n             *\r\n             * @type {Array}\r\n             */\n            var flags = [];\n            /**\r\n             * Store an interval object.\r\n             *\r\n             * @type {Object};\r\n             */\n\n            var interval;\n            /**\r\n             * Keep the Elements component.\r\n             *\r\n             * @type {string}\r\n             */\n\n            var Elements = Components.Elements;\n            /**\r\n             * Autoplay component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Autoplay = {\n              /**\r\n               * Required only when the autoplay option is true.\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: Splide.options.autoplay,\n\n              /**\r\n               * Called when the component is mounted.\r\n               * Note that autoplay starts only if there are slides over perPage number.\r\n               */\n              mount: function mount() {\n                var options = Splide.options;\n\n                if (Elements.slides.length > options.perPage) {\n                  interval = createInterval(function () {\n                    Splide.go('>');\n                  }, options.interval, function (rate) {\n                    Splide.emit(name + \":playing\", rate);\n\n                    if (Elements.bar) {\n                      applyStyle(Elements.bar, {\n                        width: rate * 100 + \"%\"\n                      });\n                    }\n                  });\n                  bind();\n                  this.play();\n                }\n              },\n\n              /**\r\n               * Start autoplay.\r\n               *\r\n               * @param {number} flag - A pause flag to be removed.\r\n               */\n              play: function play(flag) {\n                if (flag === void 0) {\n                  flag = 0;\n                }\n\n                flags = flags.filter(function (f) {\n                  return f !== flag;\n                });\n\n                if (!flags.length) {\n                  Splide.emit(name + \":play\");\n                  interval.play(Splide.options.resetProgress);\n                }\n              },\n\n              /**\r\n               * Pause autoplay.\r\n               * Note that Array.includes is not supported by IE.\r\n               *\r\n               * @param {number} flag - A pause flag to be added.\r\n               */\n              pause: function pause(flag) {\n                if (flag === void 0) {\n                  flag = 0;\n                }\n\n                interval.pause();\n\n                if (flags.indexOf(flag) === -1) {\n                  flags.push(flag);\n                }\n\n                if (flags.length === 1) {\n                  Splide.emit(name + \":pause\");\n                }\n              }\n            };\n            /**\r\n             * Listen some events.\r\n             */\n\n            function bind() {\n              var options = Splide.options;\n              var sibling = Splide.sibling;\n              var elms = [Splide.root, sibling ? sibling.root : null];\n\n              if (options.pauseOnHover) {\n                switchOn(elms, 'mouseleave', PAUSE_FLAGS.HOVER, true);\n                switchOn(elms, 'mouseenter', PAUSE_FLAGS.HOVER, false);\n              }\n\n              if (options.pauseOnFocus) {\n                switchOn(elms, 'focusout', PAUSE_FLAGS.FOCUS, true);\n                switchOn(elms, 'focusin', PAUSE_FLAGS.FOCUS, false);\n              }\n\n              if (Elements.play) {\n                Splide.on('click', function () {\n                  // Need to be removed a focus flag at first.\n                  Autoplay.play(PAUSE_FLAGS.FOCUS);\n                  Autoplay.play(PAUSE_FLAGS.MANUAL);\n                }, Elements.play);\n              }\n\n              if (Elements.pause) {\n                switchOn([Elements.pause], 'click', PAUSE_FLAGS.MANUAL, false);\n              }\n\n              Splide.on('move refresh', function () {\n                Autoplay.play();\n              }) // Rewind the timer.\n              .on('destroy', function () {\n                Autoplay.pause();\n              });\n            }\n            /**\r\n             * Play or pause on the given event.\r\n             *\r\n             * @param {Element[]} elms  - Elements.\r\n             * @param {string}    event - An event name or names.\r\n             * @param {number}    flag  - A pause flag defined on the top.\r\n             * @param {boolean}   play  - Determine whether to play or pause.\r\n             */\n\n\n            function switchOn(elms, event, flag, play) {\n              elms.forEach(function (elm) {\n                Splide.on(event, function () {\n                  Autoplay[play ? 'play' : 'pause'](flag);\n                }, elm);\n              });\n            }\n\n            return Autoplay;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/cover/index.js\n\n          /**\r\n           * The component for change an img element to background image of its wrapper.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for change an img element to background image of its wrapper.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var cover = function cover(Splide, Components) {\n            /**\r\n             * Hold options.\r\n             *\r\n             * @type {Object}\r\n             */\n            var options = Splide.options;\n            /**\r\n             * Cover component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Cover = {\n              /**\r\n               * Required only when \"cover\" option is true.\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: options.cover,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                Splide.on('lazyload:loaded', function (img) {\n                  cover(img, false);\n                });\n                Splide.on('mounted updated refresh', function () {\n                  return apply(false);\n                });\n              },\n\n              /**\r\n               * Destroy.\r\n               */\n              destroy: function destroy() {\n                apply(true);\n              }\n            };\n            /**\r\n             * Apply \"cover\" to all slides.\r\n             *\r\n             * @param {boolean} uncover - If true, \"cover\" will be clear.\r\n             */\n\n            function apply(uncover) {\n              Components.Elements.each(function (Slide) {\n                var img = child(Slide.slide, 'IMG') || child(Slide.container, 'IMG');\n\n                if (img && img.src) {\n                  cover(img, uncover);\n                }\n              });\n            }\n            /**\r\n             * Set background image of the parent element, using source of the given image element.\r\n             *\r\n             * @param {Element} img     - An image element.\r\n             * @param {boolean} uncover - Reset \"cover\".\r\n             */\n\n\n            function cover(img, uncover) {\n              applyStyle(img.parentElement, {\n                background: uncover ? '' : \"center/cover no-repeat url(\\\"\" + img.src + \"\\\")\"\n              });\n              applyStyle(img, {\n                display: uncover ? '' : 'none'\n              });\n            }\n\n            return Cover;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/arrows/path.js\n\n          /**\r\n           * Export vector path for an arrow.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Namespace definition for SVG element.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\n          /**\r\n           * The arrow vector path.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\n          /**\r\n           * SVG width and height.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var SIZE = 40;\n          ; // CONCATENATED MODULE: ./src/js/components/arrows/index.js\n\n          /**\r\n           * The component for appending prev/next arrows.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for appending prev/next arrows.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           * @param {string} name       - A component name as a lowercase string.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var arrows = function arrows(Splide, Components, name) {\n            /**\r\n             * Previous arrow element.\r\n             *\r\n             * @type {Element|undefined}\r\n             */\n            var prev;\n            /**\r\n             * Next arrow element.\r\n             *\r\n             * @type {Element|undefined}\r\n             */\n\n            var next;\n            /**\r\n             * Store the class list.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var classes = Splide.classes;\n            /**\r\n             * Hold the root element.\r\n             *\r\n             * @type {Element}\r\n             */\n\n            var root = Splide.root;\n            /**\r\n             * Whether arrows are created programmatically or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var created;\n            /**\r\n             * Hold the Elements component.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Elements = Components.Elements;\n            /**\r\n             * Arrows component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Arrows = {\n              /**\r\n               * Required when the arrows option is true.\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: Splide.options.arrows,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                // Attempt to get arrows from HTML source.\n                prev = Elements.arrows.prev;\n                next = Elements.arrows.next; // If arrows were not found in HTML, let's generate them.\n\n                if ((!prev || !next) && Splide.options.arrows) {\n                  prev = createArrow(true);\n                  next = createArrow(false);\n                  created = true;\n                  appendArrows();\n                }\n\n                if (prev && next) {\n                  bind();\n                }\n\n                this.arrows = {\n                  prev: prev,\n                  next: next\n                };\n              },\n\n              /**\r\n               * Called after all components are mounted.\r\n               */\n              mounted: function mounted() {\n                Splide.emit(name + \":mounted\", prev, next);\n              },\n\n              /**\r\n               * Destroy.\r\n               */\n              destroy: function destroy() {\n                removeAttribute([prev, next], 'disabled');\n\n                if (created) {\n                  dom_remove(prev.parentElement);\n                }\n              }\n            };\n            /**\r\n             * Listen to native and custom events.\r\n             */\n\n            function bind() {\n              Splide.on('click', function () {\n                Splide.go('<');\n              }, prev).on('click', function () {\n                Splide.go('>');\n              }, next).on('mounted move updated refresh', updateDisabled);\n            }\n            /**\r\n             * Update a disabled attribute.\r\n             */\n\n\n            function updateDisabled() {\n              var _Components$Controlle = Components.Controller,\n                  prevIndex = _Components$Controlle.prevIndex,\n                  nextIndex = _Components$Controlle.nextIndex;\n              var isEnough = Splide.length > Splide.options.perPage || Splide.is(LOOP);\n              prev.disabled = prevIndex < 0 || !isEnough;\n              next.disabled = nextIndex < 0 || !isEnough;\n              Splide.emit(name + \":updated\", prev, next, prevIndex, nextIndex);\n            }\n            /**\r\n             * Create a wrapper element and append arrows.\r\n             */\n\n\n            function appendArrows() {\n              var wrapper = create('div', {\n                \"class\": classes.arrows\n              });\n              append(wrapper, prev);\n              append(wrapper, next);\n              var slider = Elements.slider;\n              var parent = Splide.options.arrows === 'slider' && slider ? slider : root;\n              before(wrapper, parent.firstElementChild);\n            }\n            /**\r\n             * Create an arrow element.\r\n             *\r\n             * @param {boolean} prev - Determine to create a prev arrow or next arrow.\r\n             *\r\n             * @return {Element} - A created arrow element.\r\n             */\n\n\n            function createArrow(prev) {\n              var arrow = \"<button class=\\\"\" + classes.arrow + \" \" + (prev ? classes.prev : classes.next) + \"\\\" type=\\\"button\\\">\" + (\"<svg xmlns=\\\"\" + XML_NAME_SPACE + \"\\\"\\tviewBox=\\\"0 0 \" + SIZE + \" \" + SIZE + \"\\\"\\twidth=\\\"\" + SIZE + \"\\\"\\theight=\\\"\" + SIZE + \"\\\">\") + (\"<path d=\\\"\" + (Splide.options.arrowPath || PATH) + \"\\\" />\");\n              return domify(arrow);\n            }\n\n            return Arrows;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/pagination/index.js\n\n          /**\r\n           * The component for handling pagination\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The event name for updating some attributes of pagination nodes.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var ATTRIBUTES_UPDATE_EVENT = 'move.page';\n          /**\r\n           * The event name for recreating pagination.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var UPDATE_EVENT = 'updated.page refresh.page';\n          /**\r\n           * The component for handling pagination\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           * @param {string} name       - A component name as a lowercase string.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var pagination = function pagination(Splide, Components, name) {\n            /**\r\n             * Store all data for pagination.\r\n             * - list: A list element.\r\n             * - items: An array that contains objects(li, button, index, page).\r\n             *\r\n             * @type {Object}\r\n             */\n            var data = {};\n            /**\r\n             * Hold the Elements component.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Elements = Components.Elements;\n            /**\r\n             * Pagination component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Pagination = {\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                var pagination = Splide.options.pagination;\n\n                if (pagination) {\n                  data = createPagination();\n                  var slider = Elements.slider;\n                  var parent = pagination === 'slider' && slider ? slider : Splide.root;\n                  append(parent, data.list);\n                  Splide.on(ATTRIBUTES_UPDATE_EVENT, updateAttributes);\n                }\n\n                Splide.off(UPDATE_EVENT).on(UPDATE_EVENT, function () {\n                  Pagination.destroy();\n\n                  if (Splide.options.pagination) {\n                    Pagination.mount();\n                    Pagination.mounted();\n                  }\n                });\n              },\n\n              /**\r\n               * Called after all components are mounted.\r\n               */\n              mounted: function mounted() {\n                if (Splide.options.pagination) {\n                  var index = Splide.index;\n                  Splide.emit(name + \":mounted\", data, this.getItem(index));\n                  updateAttributes(index, -1);\n                }\n              },\n\n              /**\r\n               * Destroy the pagination.\r\n               * Be aware that node.remove() is not supported by IE.\r\n               */\n              destroy: function destroy() {\n                dom_remove(data.list);\n\n                if (data.items) {\n                  data.items.forEach(function (item) {\n                    Splide.off('click', item.button);\n                  });\n                } // Do not remove UPDATE_EVENT to recreate pagination if needed.\n\n\n                Splide.off(ATTRIBUTES_UPDATE_EVENT);\n                data = {};\n              },\n\n              /**\r\n               * Return an item by index.\r\n               *\r\n               * @param {number} index - A slide index.\r\n               *\r\n               * @return {Object|undefined} - An item object on success or undefined on failure.\r\n               */\n              getItem: function getItem(index) {\n                return data.items[Components.Controller.toPage(index)];\n              },\n\n              /**\r\n               * Return object containing pagination data.\r\n               *\r\n               * @return {Object} - Pagination data including list and items.\r\n               */\n              get data() {\n                return data;\n              }\n\n            };\n            /**\r\n             * Update attributes.\r\n             *\r\n             * @param {number} index     - Active index.\r\n             * @param {number} prevIndex - Prev index.\r\n             */\n\n            function updateAttributes(index, prevIndex) {\n              var prev = Pagination.getItem(prevIndex);\n              var curr = Pagination.getItem(index);\n              var active = STATUS_CLASSES.active;\n\n              if (prev) {\n                removeClass(prev.button, active);\n              }\n\n              if (curr) {\n                addClass(curr.button, active);\n              }\n\n              Splide.emit(name + \":updated\", data, prev, curr);\n            }\n            /**\r\n             * Create a wrapper and button elements.\r\n             *\r\n             * @return {Object} - An object contains all data.\r\n             */\n\n\n            function createPagination() {\n              var options = Splide.options;\n              var classes = Splide.classes;\n              var list = create('ul', {\n                \"class\": classes.pagination\n              });\n              var items = Elements.getSlides(false).filter(function (Slide) {\n                return options.focus !== false || Slide.index % options.perPage === 0;\n              }).map(function (Slide, page) {\n                var li = create('li', {});\n                var button = create('button', {\n                  \"class\": classes.page,\n                  type: 'button'\n                });\n                append(li, button);\n                append(list, li);\n                Splide.on('click', function () {\n                  Splide.go(\">\" + page);\n                }, button);\n                return {\n                  li: li,\n                  button: button,\n                  page: page,\n                  Slides: Elements.getSlidesByPage(page)\n                };\n              });\n              return {\n                list: list,\n                items: items\n              };\n            }\n\n            return Pagination;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/lazyload/index.js\n\n          /**\r\n           * The component for loading slider images lazily.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The name for a data attribute of src.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var SRC_DATA_NAME = 'data-splide-lazy';\n          /**\r\n           * The name for a data attribute of srcset.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var SRCSET_DATA_NAME = 'data-splide-lazy-srcset';\n          /**\r\n           * The component for loading slider images lazily.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           * @param {string} name       - A component name as a lowercase string.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var lazyload = function lazyload(Splide, Components, name) {\n            /**\r\n             * Next index for sequential loading.\r\n             *\r\n             * @type {number}\r\n             */\n            var nextIndex;\n            /**\r\n             * Store objects containing an img element and a Slide object.\r\n             *\r\n             * @type {Object[]}\r\n             */\n\n            var images;\n            /**\r\n             * Store the options.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var options = Splide.options;\n            /**\r\n             * Whether to load images sequentially or not.\r\n             *\r\n             * @type {boolean}\r\n             */\n\n            var isSequential = options.lazyLoad === 'sequential';\n            /**\r\n             * Lazyload component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Lazyload = {\n              /**\r\n               * Mount only when the lazyload option is provided.\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: options.lazyLoad,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                Splide.on('mounted refresh', function () {\n                  init();\n                  Components.Elements.each(function (Slide) {\n                    each(Slide.slide.querySelectorAll(\"[\" + SRC_DATA_NAME + \"], [\" + SRCSET_DATA_NAME + \"]\"), function (img) {\n                      if (!img.src && !img.srcset) {\n                        images.push({\n                          img: img,\n                          Slide: Slide\n                        });\n                        applyStyle(img, {\n                          display: 'none'\n                        });\n                      }\n                    });\n                  });\n\n                  if (isSequential) {\n                    loadNext();\n                  }\n                });\n\n                if (!isSequential) {\n                  Splide.on(\"mounted refresh moved.\" + name, check);\n                }\n              },\n\n              /**\r\n               * Destroy.\r\n               */\n              destroy: init\n            };\n            /**\r\n             * Initialize parameters.\r\n             */\n\n            function init() {\n              images = [];\n              nextIndex = 0;\n            }\n            /**\r\n             * Check how close each image is from the active slide and\r\n             * determine whether to start loading or not, according to the distance.\r\n             *\r\n             * @param {number} index - Current index.\r\n             */\n\n\n            function check(index) {\n              index = isNaN(index) ? Splide.index : index;\n              images = images.filter(function (image) {\n                if (image.Slide.isWithin(index, options.perPage * (options.preloadPages + 1))) {\n                  load(image.img, image.Slide);\n                  return false;\n                }\n\n                return true;\n              }); // Unbind if all images are loaded.\n\n              if (!images[0]) {\n                Splide.off(\"moved.\" + name);\n              }\n            }\n            /**\r\n             * Start loading an image.\r\n             * Creating a clone of the image element since setting src attribute directly to it\r\n             * often occurs 'hitch', blocking some other processes of a browser.\r\n             *\r\n             * @param {Element} img   - An image element.\r\n             * @param {Object}  Slide - A Slide object.\r\n             */\n\n\n            function load(img, Slide) {\n              addClass(Slide.slide, STATUS_CLASSES.loading);\n              var spinner = create('span', {\n                \"class\": Splide.classes.spinner\n              });\n              append(img.parentElement, spinner);\n\n              img.onload = function () {\n                loaded(img, spinner, Slide, false);\n              };\n\n              img.onerror = function () {\n                loaded(img, spinner, Slide, true);\n              };\n\n              setAttribute(img, 'srcset', getAttribute(img, SRCSET_DATA_NAME) || '');\n              setAttribute(img, 'src', getAttribute(img, SRC_DATA_NAME) || '');\n            }\n            /**\r\n             * Start loading a next image in images array.\r\n             */\n\n\n            function loadNext() {\n              if (nextIndex < images.length) {\n                var image = images[nextIndex];\n                load(image.img, image.Slide);\n              }\n\n              nextIndex++;\n            }\n            /**\r\n             * Called just after the image was loaded or loading was aborted by some error.\r\n             *\r\n             * @param {Element} img     - An image element.\r\n             * @param {Element} spinner - A spinner element.\r\n             * @param {Object}  Slide   - A Slide object.\r\n             * @param {boolean} error   - True if the image was loaded successfully or false on error.\r\n             */\n\n\n            function loaded(img, spinner, Slide, error) {\n              removeClass(Slide.slide, STATUS_CLASSES.loading);\n\n              if (!error) {\n                dom_remove(spinner);\n                applyStyle(img, {\n                  display: ''\n                });\n                Splide.emit(name + \":loaded\", img).emit('resize');\n              }\n\n              if (isSequential) {\n                loadNext();\n              }\n            }\n\n            return Lazyload;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/constants/a11y.js\n\n          /**\r\n           * Export aria attribute names.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Attribute name for aria-current.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var ARIA_CURRENRT = 'aria-current';\n          /**\r\n           * Attribute name for aria-control.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var ARIA_CONTROLS = 'aria-controls';\n          /**\r\n           * Attribute name for aria-control.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var ARIA_LABEL = 'aria-label';\n          /**\r\n           * Attribute name for aria-labelledby.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var ARIA_LABELLEDBY = 'aria-labelledby';\n          /**\r\n           * Attribute name for aria-hidden.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var ARIA_HIDDEN = 'aria-hidden';\n          /**\r\n           * Attribute name for tab-index.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var TAB_INDEX = 'tabindex';\n          ; // CONCATENATED MODULE: ./src/js/components/keyboard/index.js\n\n          /**\r\n           * The component for controlling slides via keyboard.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Map a key to a slide control.\r\n           *\r\n           * @type {Object}\r\n           */\n\n          var KEY_MAP = {\n            ltr: {\n              ArrowLeft: '<',\n              ArrowRight: '>',\n              // For IE.\n              Left: '<',\n              Right: '>'\n            },\n            rtl: {\n              ArrowLeft: '>',\n              ArrowRight: '<',\n              // For IE.\n              Left: '>',\n              Right: '<'\n            },\n            ttb: {\n              ArrowUp: '<',\n              ArrowDown: '>',\n              // For IE.\n              Up: '<',\n              Down: '>'\n            }\n          };\n          /**\r\n           * The component for controlling slides via keyboard.\r\n           *\r\n           * @param {Splide} Splide - A Splide instance.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var keyboard = function keyboard(Splide) {\n            /**\r\n             * Hold the target element.\r\n             *\r\n             * @type {Element|Document|undefined}\r\n             */\n            var target;\n            return {\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                Splide.on('mounted updated', function () {\n                  var options = Splide.options;\n                  var root = Splide.root;\n                  var map = KEY_MAP[options.direction];\n                  var keyboard = options.keyboard;\n\n                  if (target) {\n                    Splide.off('keydown', target);\n                    removeAttribute(root, TAB_INDEX);\n                  }\n\n                  if (keyboard) {\n                    if (keyboard === 'focused') {\n                      target = root;\n                      setAttribute(root, TAB_INDEX, 0);\n                    } else {\n                      target = document;\n                    }\n\n                    Splide.on('keydown', function (e) {\n                      if (map[e.key]) {\n                        Splide.go(map[e.key]);\n                      }\n                    }, target);\n                  }\n                });\n              }\n            };\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/a11y/index.js\n\n          /**\r\n           * The component for enhancing accessibility.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The component for enhancing accessibility.\r\n           *\r\n           * @param {Splide} Splide     - A Splide instance.\r\n           * @param {Object} Components - An object containing components.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var a11y = function a11y(Splide, Components) {\n            /**\r\n             * Hold a i18n object.\r\n             *\r\n             * @type {Object}\r\n             */\n            var i18n = Splide.i18n;\n            /**\r\n             * Hold the Elements component.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Elements = Components.Elements;\n            /**\r\n             * All attributes related with A11y.\r\n             *\r\n             * @type {string[]}\r\n             */\n\n            var allAttributes = [ARIA_HIDDEN, TAB_INDEX, ARIA_CONTROLS, ARIA_LABEL, ARIA_CURRENRT, 'role'];\n            /**\r\n             * A11y component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var A11y = {\n              /**\r\n               * Required only when the accessibility option is true.\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: Splide.options.accessibility,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                Splide.on('visible', function (Slide) {\n                  updateSlide(Slide.slide, true);\n                }).on('hidden', function (Slide) {\n                  updateSlide(Slide.slide, false);\n                }).on('arrows:mounted', initArrows).on('arrows:updated', updateArrows).on('pagination:mounted', initPagination).on('pagination:updated', updatePagination).on('refresh', function () {\n                  removeAttribute(Components.Clones.clones, allAttributes);\n                });\n\n                if (Splide.options.isNavigation) {\n                  Splide.on('navigation:mounted navigation:updated', initNavigation).on('active', function (Slide) {\n                    updateNavigation(Slide, true);\n                  }).on('inactive', function (Slide) {\n                    updateNavigation(Slide, false);\n                  });\n                }\n\n                initAutoplay();\n              },\n\n              /**\r\n               * Destroy.\r\n               */\n              destroy: function destroy() {\n                var Arrows = Components.Arrows;\n                var arrows = Arrows ? Arrows.arrows : {};\n                removeAttribute(Elements.slides.concat([arrows.prev, arrows.next, Elements.play, Elements.pause]), allAttributes);\n              }\n            };\n            /**\r\n             * Update slide attributes when it gets visible or hidden.\r\n             *\r\n             * @param {Element} slide   - A slide element.\r\n             * @param {Boolean} visible - True when the slide gets visible, or false when hidden.\r\n             */\n\n            function updateSlide(slide, visible) {\n              setAttribute(slide, ARIA_HIDDEN, !visible);\n\n              if (Splide.options.slideFocus) {\n                setAttribute(slide, TAB_INDEX, visible ? 0 : -1);\n              }\n            }\n            /**\r\n             * Initialize arrows if they are available.\r\n             * Append screen reader elements and add aria-controls attribute.\r\n             *\r\n             * @param {Element} prev - Previous arrow element.\r\n             * @param {Element} next - Next arrow element.\r\n             */\n\n\n            function initArrows(prev, next) {\n              var controls = Elements.track.id;\n              setAttribute(prev, ARIA_CONTROLS, controls);\n              setAttribute(next, ARIA_CONTROLS, controls);\n            }\n            /**\r\n             * Update arrow attributes.\r\n             *\r\n             * @param {Element} prev      - Previous arrow element.\r\n             * @param {Element} next      - Next arrow element.\r\n             * @param {number}  prevIndex - Previous slide index or -1 when there is no precede slide.\r\n             * @param {number}  nextIndex - Next slide index or -1 when there is no next slide.\r\n             */\n\n\n            function updateArrows(prev, next, prevIndex, nextIndex) {\n              var index = Splide.index;\n              var prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n              var nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n              setAttribute(prev, ARIA_LABEL, prevLabel);\n              setAttribute(next, ARIA_LABEL, nextLabel);\n            }\n            /**\r\n             * Initialize pagination if it's available.\r\n             * Append a screen reader element and add aria-controls/label attribute to each item.\r\n             *\r\n             * @param {Object} data       - Data object containing all items.\r\n             * @param {Object} activeItem - An initial active item.\r\n             */\n\n\n            function initPagination(data, activeItem) {\n              if (activeItem) {\n                setAttribute(activeItem.button, ARIA_CURRENRT, true);\n              }\n\n              data.items.forEach(function (item) {\n                var options = Splide.options;\n                var text = options.focus === false && options.perPage > 1 ? i18n.pageX : i18n.slideX;\n                var label = sprintf(text, item.page + 1);\n                var button = item.button;\n                var controls = item.Slides.map(function (Slide) {\n                  return Slide.slide.id;\n                });\n                setAttribute(button, ARIA_CONTROLS, controls.join(' '));\n                setAttribute(button, ARIA_LABEL, label);\n              });\n            }\n            /**\r\n             * Update pagination attributes.\r\n             *\r\n             * @param {Object}  data - Data object containing all items.\r\n             * @param {Element} prev - A previous active element.\r\n             * @param {Element} curr - A current active element.\r\n             */\n\n\n            function updatePagination(data, prev, curr) {\n              if (prev) {\n                removeAttribute(prev.button, ARIA_CURRENRT);\n              }\n\n              if (curr) {\n                setAttribute(curr.button, ARIA_CURRENRT, true);\n              }\n            }\n            /**\r\n             * Initialize autoplay buttons.\r\n             */\n\n\n            function initAutoplay() {\n              ['play', 'pause'].forEach(function (name) {\n                var elm = Elements[name];\n\n                if (elm) {\n                  if (!isButton(elm)) {\n                    setAttribute(elm, 'role', 'button');\n                  }\n\n                  setAttribute(elm, ARIA_CONTROLS, Elements.track.id);\n                  setAttribute(elm, ARIA_LABEL, i18n[name]);\n                }\n              });\n            }\n            /**\r\n             * Initialize navigation slider.\r\n             * Add button role, aria-label, aria-controls to slide elements and append screen reader text to them.\r\n             *\r\n             * @param {Splide} main - A main Splide instance.\r\n             */\n\n\n            function initNavigation(main) {\n              Elements.each(function (Slide) {\n                var slide = Slide.slide;\n                var realIndex = Slide.realIndex;\n\n                if (!isButton(slide)) {\n                  setAttribute(slide, 'role', 'button');\n                }\n\n                var slideIndex = realIndex > -1 ? realIndex : Slide.index;\n                var label = sprintf(i18n.slideX, slideIndex + 1);\n                var mainSlide = main.Components.Elements.getSlide(slideIndex);\n                setAttribute(slide, ARIA_LABEL, label);\n\n                if (mainSlide) {\n                  setAttribute(slide, ARIA_CONTROLS, mainSlide.slide.id);\n                }\n              });\n            }\n            /**\r\n             * Update navigation attributes.\r\n             *\r\n             * @param {Object}  Slide  - A target Slide object.\r\n             * @param {boolean} active - True if the slide is active or false if inactive.\r\n             */\n\n\n            function updateNavigation(_ref, active) {\n              var slide = _ref.slide;\n\n              if (active) {\n                setAttribute(slide, ARIA_CURRENRT, true);\n              } else {\n                removeAttribute(slide, ARIA_CURRENRT);\n              }\n            }\n            /**\r\n             * Check if the given element is button or not.\r\n             *\r\n             * @param {Element} elm - An element to be checked.\r\n             *\r\n             * @return {boolean} - True if the given element is button.\r\n             */\n\n\n            function isButton(elm) {\n              return elm.tagName === 'BUTTON';\n            }\n\n            return A11y;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/sync/index.js\n\n          /**\r\n           * The component for synchronizing a slider with another.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * The event name for sync.\r\n           *\r\n           * @type {string}\r\n           */\n\n          var SYNC_EVENT = 'move.sync';\n          /**\r\n           * The event names for click navigation.\r\n           * @type {string}\r\n           */\n\n          var CLICK_EVENTS = 'mouseup touchend';\n          /**\r\n           * The keys for triggering the navigation button.\r\n           *\r\n           * @type {String[]}\r\n           */\n\n          var TRIGGER_KEYS = [' ', 'Enter', 'Spacebar'];\n          /**\r\n           * The component for synchronizing a slider with another.\r\n           *\r\n           * @param {Splide} Splide - A Splide instance.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var sync = function sync(Splide) {\n            /**\r\n             * Keep the sibling Splide instance.\r\n             *\r\n             * @type {Splide}\r\n             */\n            var sibling = Splide.sibling;\n            /**\r\n             * Whether the sibling slider is navigation or not.\r\n             *\r\n             * @type {Splide|boolean}\r\n             */\n\n            var isNavigation = sibling && sibling.options.isNavigation;\n            /**\r\n             * Layout component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Sync = {\n              /**\r\n               * Required only when the sub slider is available.\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: !!sibling,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                syncMain();\n                syncSibling();\n\n                if (isNavigation) {\n                  bind();\n                  Splide.on('refresh', function () {\n                    setTimeout(function () {\n                      bind();\n                      sibling.emit('navigation:updated', Splide);\n                    });\n                  });\n                }\n              },\n\n              /**\r\n               * Called after all components are mounted.\r\n               */\n              mounted: function mounted() {\n                if (isNavigation) {\n                  sibling.emit('navigation:mounted', Splide);\n                }\n              }\n            };\n            /**\r\n             * Listen the primary slider event to move secondary one.\r\n             * Must unbind a handler at first to avoid infinite loop.\r\n             */\n\n            function syncMain() {\n              Splide.on(SYNC_EVENT, function (newIndex, prevIndex, destIndex) {\n                sibling.off(SYNC_EVENT).go(sibling.is(LOOP) ? destIndex : newIndex, false);\n                syncSibling();\n              });\n            }\n            /**\r\n             * Listen the secondary slider event to move primary one.\r\n             * Must unbind a handler at first to avoid infinite loop.\r\n             */\n\n\n            function syncSibling() {\n              sibling.on(SYNC_EVENT, function (newIndex, prevIndex, destIndex) {\n                Splide.off(SYNC_EVENT).go(Splide.is(LOOP) ? destIndex : newIndex, false);\n                syncMain();\n              });\n            }\n            /**\r\n             * Listen some events on each slide.\r\n             */\n\n\n            function bind() {\n              sibling.Components.Elements.each(function (_ref) {\n                var slide = _ref.slide,\n                    index = _ref.index;\n                /*\r\n                 * Listen mouseup and touchend events to handle click.\r\n                 */\n\n                Splide.off(CLICK_EVENTS, slide).on(CLICK_EVENTS, function (e) {\n                  // Ignore a middle or right click.\n                  if (!e.button || e.button === 0) {\n                    moveSibling(index);\n                  }\n                }, slide);\n                /*\r\n                 * Subscribe keyup to handle Enter and Space key.\r\n                 * Note that Array.includes is not supported by IE.\r\n                 */\n\n                Splide.off('keyup', slide).on('keyup', function (e) {\n                  if (TRIGGER_KEYS.indexOf(e.key) > -1) {\n                    e.preventDefault();\n                    moveSibling(index);\n                  }\n                }, slide, {\n                  passive: false\n                });\n              });\n            }\n            /**\r\n             * Move the sibling to the given index.\r\n             * Need to check \"IDLE\" status because slides can be moving by Drag component.\r\n             *\r\n             * @param {number} index - Target index.\r\n             */\n\n\n            function moveSibling(index) {\n              if (Splide.State.is(_IDLE)) {\n                sibling.go(index);\n              }\n            }\n\n            return Sync;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/breakpoints/index.js\n\n          /**\r\n           * The component for updating options according to a current window width.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Interval time for throttle.\r\n           *\r\n           * @type {number}\r\n           */\n\n          var THROTTLE = 50;\n          /**\r\n           * The component for updating options according to a current window width.\r\n           *\r\n           * @param {Splide} Splide - A Splide instance.\r\n           *\r\n           * @return {Object} - The component object.\r\n           */\n\n          /* harmony default export */\n\n          var breakpoints = function breakpoints(Splide) {\n            /**\r\n             * Store breakpoints.\r\n             *\r\n             * @type {Object|boolean}\r\n             */\n            var breakpoints = Splide.options.breakpoints;\n            /**\r\n             * The check function whose frequency of call is reduced.\r\n             *\r\n             * @type {Function}\r\n             */\n\n            var throttledCheck = throttle(check, THROTTLE);\n            /**\r\n             * Keep initial options.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var initialOptions;\n            /**\r\n             * An array containing objects of point and MediaQueryList.\r\n             *\r\n             * @type {Object[]}\r\n             */\n\n            var map = [];\n            /**\r\n             * Hold the previous breakpoint.\r\n             *\r\n             * @type {number|undefined}\r\n             */\n\n            var prevPoint;\n            /**\r\n             * Breakpoints component object.\r\n             *\r\n             * @type {Object}\r\n             */\n\n            var Breakpoints = {\n              /**\r\n               * Required only when the breakpoints definition is provided and browser supports matchMedia.\r\n               *\r\n               * @type {boolean}\r\n               */\n              required: breakpoints && matchMedia,\n\n              /**\r\n               * Called when the component is mounted.\r\n               */\n              mount: function mount() {\n                map = Object.keys(breakpoints).sort(function (n, m) {\n                  return +n - +m;\n                }).map(function (point) {\n                  return {\n                    point: point,\n                    mql: matchMedia(\"(max-width:\" + point + \"px)\")\n                  };\n                });\n                /*\r\n                 * To keep monitoring resize event after destruction without \"completely\",\r\n                 * use native addEventListener instead of Splide.on.\r\n                 */\n\n                this.destroy(true);\n                addEventListener('resize', throttledCheck); // Keep initial options to apply them when no breakpoint matches.\n\n                initialOptions = Splide.options;\n                check();\n              },\n\n              /**\r\n               * Destroy.\r\n               *\r\n               * @param {boolean} completely - Whether to destroy Splide completely.\r\n               */\n              destroy: function destroy(completely) {\n                if (completely) {\n                  removeEventListener('resize', throttledCheck);\n                }\n              }\n            };\n            /**\r\n             * Check the breakpoint.\r\n             */\n\n            function check() {\n              var point = getPoint();\n\n              if (point !== prevPoint) {\n                prevPoint = point;\n                var State = Splide.State;\n                var options = breakpoints[point] || initialOptions;\n                var destroy = options.destroy;\n\n                if (destroy) {\n                  Splide.options = initialOptions;\n                  Splide.destroy(destroy === 'completely');\n                } else {\n                  if (State.is(_DESTROYED)) {\n                    Splide.mount();\n                  }\n\n                  Splide.options = options;\n                }\n              }\n            }\n            /**\r\n             * Return the breakpoint matching current window width.\r\n             * Note that Array.prototype.find is not supported by IE.\r\n             *\r\n             * @return {number|string} - A breakpoint as number or string. -1 if no point matches.\r\n             */\n\n\n            function getPoint() {\n              var item = map.filter(function (item) {\n                return item.mql.matches;\n              })[0];\n              return item ? item.point : -1;\n            }\n\n            return Breakpoints;\n          };\n\n          ; // CONCATENATED MODULE: ./src/js/components/index.js\n\n          /**\r\n           * Export components.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          var COMPLETE = {\n            Options: options,\n            Breakpoints: breakpoints,\n            Controller: controller,\n            Elements: components_elements,\n            Track: track,\n            Clones: clones,\n            Layout: layout,\n            Drag: drag,\n            Click: click,\n            Autoplay: autoplay,\n            Cover: cover,\n            Arrows: arrows,\n            Pagination: pagination,\n            LazyLoad: lazyload,\n            Keyboard: keyboard,\n            Sync: sync,\n            A11y: a11y\n          };\n          var LIGHT = {\n            Options: options,\n            Controller: controller,\n            Elements: components_elements,\n            Track: track,\n            Clones: clones,\n            Layout: layout,\n            Drag: drag,\n            Click: click,\n            Arrows: arrows,\n            Pagination: pagination,\n            A11y: a11y\n          };\n          ; // CONCATENATED MODULE: ./build/module/module.js\n\n          function _inheritsLoose(subClass, superClass) {\n            subClass.prototype = Object.create(superClass.prototype);\n            subClass.prototype.constructor = subClass;\n            subClass.__proto__ = superClass;\n          }\n          /**\r\n           * Export Splide class for import.\r\n           *\r\n           * @author    Naotoshi Fujita\r\n           * @copyright Naotoshi Fujita. All rights reserved.\r\n           */\n\n          /**\r\n           * Export Splide class for import from other projects.\r\n           */\n\n\n          var module_Splide = /*#__PURE__*/function (_Core) {\n            _inheritsLoose(Splide, _Core);\n\n            function Splide(root, options) {\n              return _Core.call(this, root, options, COMPLETE) || this;\n            }\n\n            return Splide;\n          }(Splide);\n          /***/\n\n        }\n        /******/\n\n      };\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (__webpack_module_cache__[moduleId]) {\n          /******/\n          return __webpack_module_cache__[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n      /******/\n\n      /* webpack/runtime/define property getters */\n\n      /******/\n\n\n      (function () {\n        /******/\n        // define getter functions for harmony exports\n\n        /******/\n        __webpack_require__.d = function (exports, definition) {\n          /******/\n          for (var key in definition) {\n            /******/\n            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n              /******/\n              Object.defineProperty(exports, key, {\n                enumerable: true,\n                get: definition[key]\n              });\n              /******/\n            }\n            /******/\n\n          }\n          /******/\n\n        };\n        /******/\n\n      })();\n      /******/\n\n      /******/\n\n      /* webpack/runtime/hasOwnProperty shorthand */\n\n      /******/\n\n\n      (function () {\n        /******/\n        __webpack_require__.o = function (obj, prop) {\n          return Object.prototype.hasOwnProperty.call(obj, prop);\n        };\n        /******/\n\n      })();\n      /******/\n\n      /******/\n\n      /* webpack/runtime/make namespace object */\n\n      /******/\n\n\n      (function () {\n        /******/\n        // define __esModule on exports\n\n        /******/\n        __webpack_require__.r = function (exports) {\n          /******/\n          if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n            /******/\n            Object.defineProperty(exports, Symbol.toStringTag, {\n              value: 'Module'\n            });\n            /******/\n          }\n          /******/\n\n\n          Object.defineProperty(exports, '__esModule', {\n            value: true\n          });\n          /******/\n        };\n        /******/\n\n      })();\n      /******/\n\n      /************************************************************************/\n\n      /******/\n      // module exports must be returned from runtime so entry inlining is disabled\n\n      /******/\n      // startup\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n\n      return __webpack_require__(311);\n      /******/\n    }()\n  );\n});"],"names":["factory","self","__webpack_modules__","__unused_webpack_module","__webpack_exports__","r","d","states_namespaceObject","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_CREATED","_DESTROYED","_IDLE","_MOUNTED","_MOVING","keys","each","obj","callback","some","index","values","map","isObject","subject","merge","_ref","from","to","value","toArray","Array","isArray","between","m1","m2","Math","min","max","sprintf","format","replacements","replace","unit","type","parseFloat","pad","number","toPixel","root","div","create","applyStyle","position","width","append","clientWidth","dom_remove","find","elm","selector","querySelector","split","child","parent","tagOrClassName","children","filter","hasClass","tagName","tag","attrs","document","createElement","setAttribute","domify","html","innerHTML","firstChild","elms","forEach","parentElement","removeChild","appendChild","before","ref","insertBefore","styles","prop","style","addOrRemoveClasses","classes","remove","name","classList","addClass","removeClass","className","contains","getAttribute","removeAttribute","names","getRect","getBoundingClientRect","SLIDE","LOOP","FADE","slide","Splide","Components","list","endCallback","mount","Elements","on","e","start","destIndex","newIndex","prevIndex","coord","done","options","edgeIndex","Controller","speed","is","rewindSpeed","transition","easing","transform","x","y","fade","slides","track","height","clientHeight","setTimeout","error","message","console","MESSAGE_PREFIX","exist","Error","ROOT","STATUS_CLASSES","active","visible","loading","DEFAULTS","rewind","waitForTransition","fixedWidth","fixedHeight","heightRatio","autoWidth","autoHeight","perPage","perMove","clones","focus","gap","padding","arrows","arrowPath","pagination","autoplay","interval","pauseOnHover","pauseOnFocus","resetProgress","lazyLoad","preloadPages","keyboard","drag","dragAngleThreshold","swipeDistanceThreshold","flickVelocityThreshold","flickPower","flickMaxPages","direction","cover","accessibility","slideFocus","isNavigation","trimSpace","updateOnMove","throttle","destroy","breakpoints","slider","container","arrow","prev","next","page","clone","progress","bar","play","pause","spinner","sr","i18n","first","last","slideX","pageX","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","curr","Element","Event","data","unsubscribe","item","removeEventListener","event","handler","events","addEventListener","push","off","emit","_len","args","_key","core_event","State","set","state","STATES","_o","_i","_c","_e","_t","Constructor","protoProps","staticProps","_proto","Extensions","Transition","_this","components","Component","toLowerCase","compose","component","required","undefined","mounted","visibility","sync","splide","sibling","_this$Event","concat","go","control","wait","add","refresh","bind","completely","_this2","reverse","get","parseInt","created","JSON","parse","RTL","TTB","STYLE_RESTORE_EVENTS","components_elements","Slides","id","window","uid","init","getClasses","Slide","findParts","collect","register","realIndex","SlideObject","STATUS_UPDATE_EVENTS","isClone","update","restoreStyles","_update","display","isActive","isVisible","ceil","trackRect","slideRect","top","bottom","left","right","isWithin","within","diff","abs","forVisibility","elements_slide","getSlide","getSlides","includeClones","getSlidesByPage","idx","toIndex","splice","images","querySelectorAll","count","img","onload","onerror","loaded","rootClass","floor","controller","isLoop","newOptions","silently","trim","Track","matches","String","match","indicator","sign","toPage","parsePage","hasFocus","pageLength","edge","isRtl","Layout","isVertical","isFade","isRTL","isLoopPending","jump","newPosition","getTrimmedPosition","toCoord","onTransitionEnd","translate","cancel","shift","toPosition","innerSize","totalSize","size","minDistance","Infinity","slideIndex","distance","slideSize","offset","cloneCount","Clones","getCloneCount","slice","cloneDeeply","generateClones","baseCount","dimension","fixedSize","cloneNode","func","timeout","layout","resize","totalHeight","totalWidth","slideHeight","slideWidth","margin","paddingTop","paddingBottom","offsetHeight","vertical","paddingLeft","paddingRight","listRect","offsetWidth","horizontal","getOwnPropertyDescriptor","maxWidth","drag_abs","startCoord","startInfo","currentInfo","isDragging","axis","Drag","disabled","move","passive","end","preventDefault","analyze","cancelable","_start","_end","log","resist","angle","atan","PI","shouldMove","info","velocity","absV","destination","timeStamp","touches","_ref2","clientX","clientY","_ref3","_ref3$x","fromX","_ref3$y","duration","time","click","onClick","stopPropagation","stopImmediatePropagation","capture","PAUSE_FLAGS","updateDisabled","_Components$Controlle","nextIndex","isEnough","createArrow","wrapper","firstElementChild","appendArrows","ATTRIBUTES_UPDATE_EVENT","UPDATE_EVENT","Pagination","items","li","button","createPagination","updateAttributes","getItem","SRC_DATA_NAME","SRCSET_DATA_NAME","ARIA_CURRENRT","ARIA_CONTROLS","ARIA_LABEL","ARIA_HIDDEN","TAB_INDEX","KEY_MAP","ltr","ArrowLeft","ArrowRight","Left","Right","rtl","ttb","ArrowUp","ArrowDown","Up","Down","a11y","allAttributes","updateSlide","initArrows","controls","updateArrows","prevLabel","nextLabel","initPagination","activeItem","label","join","updatePagination","initNavigation","main","isButton","mainSlide","updateNavigation","Arrows","SYNC_EVENT","CLICK_EVENTS","TRIGGER_KEYS","COMPLETE","Options","Breakpoints","initialOptions","prevPoint","throttledCheck","check","point","mql","matchMedia","sort","n","m","Click","Autoplay","flags","elapse","rate","requestAnimationFrame","_pause","step","timestamp","reset","createInterval","switchOn","flag","f","indexOf","Cover","uncover","src","background","LazyLoad","isSequential","isNaN","image","load","loadNext","srcset","Keyboard","Sync","syncMain","syncSibling","moveSibling","A11y","module_Splide","_Core","subClass","superClass","constructor","__proto__","__webpack_module_cache__","moduleId","exports","module","definition","o","Symbol","toStringTag"],"sourceRoot":""}