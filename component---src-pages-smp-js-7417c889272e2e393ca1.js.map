{"version":3,"sources":["webpack://ietnitk/./src/components/helper.js","webpack://ietnitk/./src/pages/smp.js"],"names":["generateSIGHash","sig_images","img_hash","forEach","element","name","childImageSharp","fixed","srcWebp","RenderAuthors","arr","cls","map","index2","key","to","toLowerCase","split","join","length","data","location","sigImages","smp","nodes","useEffect","site_data","siteMetadata","allow","navigate","pathname","title","Date","getFullYear","className","style","paddingTop","group","e","i","id","fieldValue","description","mentors","target","rel","href","link","maxWidth","src","alt"],"mappings":"sLAOaA,EAAkB,SAAAC,GAC7B,IAAIC,EAAW,GAKf,OAJAD,GACEA,EAAWE,SAAQ,SAAAC,GACjBF,EAASE,EAAQC,MAAQD,EAAQE,gBAAgBC,MAAMC,WAEpDN,GAGIO,EAAgB,SAACC,EAAKC,GAAN,OAC3BD,EAAIE,KAAI,SAACP,EAAMQ,GAAP,OACN,oCAEE,gBAAC,KAAD,CACEC,IAAK,IAAMD,EACXE,GAAI,YAAcV,EAAKW,cAAcC,MAAM,KAAKC,KAAK,KAEpDb,GAEFQ,EAAS,IAAMH,EAAIS,OAChB,OACAN,EAAS,IAAMH,EAAIS,OACnB,IACA,S,6FC+FV,UApHY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACXC,EAAmBF,EAAnBE,UAAWC,EAAQH,EAARG,IACbtB,GAAaD,QAAgBsB,EAAUE,OAM7C,OALAC,gBAAU,YACmC,IAAxCL,EAAKM,UAAUC,aAAaJ,IAAIK,QACjCC,QAAS,QAIX,gBAAC,IAAD,CAAQR,SAAUA,EAASS,UACzB,gBAAC,IAAD,CAAiBC,MAAO,QAAS,IAAIC,MAAOC,gBAC5C,wBAAMC,UAAU,QACd,2BAASA,UAAU,wBACjB,uBAAKA,UAAU,aACb,uBAAKA,UAAU,iBACb,sBAAIA,UAAU,gBAAd,iBACgB,IAAIF,MAAOC,eAE3B,8GAQR,uBAAKC,UAAU,eAAeC,MAAO,CAAEC,WAAY,QACjD,uBAAKF,UAAU,aACZX,EAAIc,MAAMzB,KAAI,SAAC0B,EAAGC,GAAJ,OACb,gBAAC,WAAD,CAAgBzB,IAAKyB,GACnB,uBAAKL,UAAU,OACb,uBAAKA,UAAU,+BACb,sBAAIM,GAAIF,EAAEG,WAAYP,UAAU,gBAC9B,gBAAC,KAAD,CAAMnB,GAAI,SAAWuB,EAAEG,WAAWzB,eAC/BsB,EAAEG,aAGNH,EAAEd,MAAMZ,KAAI,SAACW,EAAKgB,GAAN,OACX,gCACE,sBAAIC,GAAIjB,EAAIQ,OAAQR,EAAIQ,OACxB,2BACE,yBACGR,EAAImB,YADP,IAEE,2BACA,wBAAMR,UAAU,cACd,2CACCzB,OAAcc,EAAIoB,QAAS,KAE9B,2BACA,qBACEC,OAAO,SACPC,IAAI,aACJC,KAAM1B,EAAKM,UAAUC,aAAaJ,IAAIwB,MAHxC,4BAYV,uBAAKb,UAAU,sDACb,gBAAC,KAAD,CAAMnB,GAAI,SAAWuB,EAAEG,WAAWzB,eAChC,uBACEkB,UAAU,4BACVC,MAAO,CAAEa,SAAU,QAASZ,WAAY,OACxCa,IAAKhD,EAAWqC,EAAEG,YAClBS,IAAKZ,EAAEG,gBAKf","file":"component---src-pages-smp-js-7417c889272e2e393ca1.js","sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\n\nexport const redirectController = control => {\n  if (!control) {\n  }\n}\nexport const generateSIGHash = sig_images => {\n  let img_hash = {}\n  sig_images &&\n    sig_images.forEach(element => {\n      img_hash[element.name] = element.childImageSharp.fixed.srcWebp\n    })\n  return img_hash\n}\n\nexport const RenderAuthors = (arr, cls) =>\n  arr.map((name, index2) => (\n    <>\n      &nbsp;\n      <Link\n        key={\"x\" + index2}\n        to={\"/members/\" + name.toLowerCase().split(\" \").join(\"\")}\n      >\n        {name}\n      </Link>\n      {index2 + 2 === arr.length\n        ? \" and\"\n        : index2 + 1 !== arr.length\n        ? \",\"\n        : \"\"}\n    </>\n  ))\n","import React, { useEffect } from \"react\"\nimport Layout from \"../components/layout\"\nimport SearchEngineOps from \"../components/seo\"\nimport { RenderAuthors, generateSIGHash } from \"../components/helper\"\nimport { Link } from \"gatsby\"\nimport { graphql,navigate } from \"gatsby\"\n\n\n\nconst SMP = ({ data, location }) => {\n  const { sigImages, smp } = data\n  const sig_images = generateSIGHash(sigImages.nodes)\n  useEffect(()=>{\n    if(data.site_data.siteMetadata.smp.allow!==true){\n      navigate(\"/\")\n    }\n  })\n  return (\n    <Layout location={location.pathname}>\n      <SearchEngineOps title={\"SMP \" + new Date().getFullYear()} />\n      <main className=\"page\">\n        <section className=\"clean-block about-us\">\n          <div className=\"container\">\n            <div className=\"block-heading\">\n              <h2 className=\"text-primary\">\n                IET NITK SMP {new Date().getFullYear()}\n              </h2>\n              <p>\n                IET NITK's Official Mentorship Program, exclusive for first and\n                second years.\n              </p>\n            </div>\n          </div>\n        </section>\n      </main>\n      <div className=\"site-section\" style={{ paddingTop: \"1em\" }}>\n        <div className=\"container\">\n          {smp.group.map((e, i) => (\n            <React.Fragment key={i}>\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-8 col-sm-12\">\n                  <h3 id={e.fieldValue} className=\"smp-signames\">\n                    <Link to={\"/sigs/\" + e.fieldValue.toLowerCase()}>\n                      {e.fieldValue}\n                    </Link>\n                  </h3>\n                  {e.nodes.map((smp, i) => (\n                    <>\n                      <h5 id={smp.title}>{smp.title}</h5>\n                      <div>\n                        <p>\n                          {smp.description}.\n                          <br />\n                          <span className=\"text-muted\">\n                            <strong>Mentors:</strong>\n                            {RenderAuthors(smp.mentors, \"\")}\n                          </span>\n                          <br />\n                          <a\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            href={data.site_data.siteMetadata.smp.link}\n                          >\n                            Click to register\n                          </a>\n                        </p>\n                      </div>\n                    </>\n                  ))}\n                </div>\n                <div className=\"col-lg-6 col-md-4 hidden-sm hidden-xs smp-logo-div\">\n                  <Link to={\"/sigs/\" + e.fieldValue.toLowerCase()}>\n                    <img\n                      className=\"mobile-invisible smp-logo\"\n                      style={{ maxWidth: \"150px\", paddingTop: \"2em\" }}\n                      src={sig_images[e.fieldValue]}\n                      alt={e.fieldValue}\n                    />\n                  </Link>\n                </div>\n              </div>\n              <hr />\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const postQuery = graphql`\n  {\n    sigImages: allFile(filter: { sourceInstanceName: { eq: \"sig_logo\" } }) {\n      nodes {\n        name\n        childImageSharp {\n          fixed {\n            srcWebp\n          }\n        }\n      }\n    }\n\n    site_data: site {\n      siteMetadata {\n        smp {\n          allow\n          link\n        }\n      }\n    }\n    smp: allSmpYaml(sort: { fields: title }) {\n      group(field: sig) {\n        nodes {\n          title\n          description\n          link\n          mentors\n        }\n        fieldValue\n      }\n    }\n  }\n`\n\nexport default SMP\n"],"sourceRoot":""}